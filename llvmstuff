
// ----------------------------------------------------------------------------
// This is autogenerated code by Piggy.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace clangc
{
    public enum @GeneratedName0
    {
        @LLVMAbortProcessAction,
        @LLVMPrintMessageAction,
        @LLVMReturnStatusAction
    }
    public enum @GeneratedName1
    {
        @LLVMRet = 1,
        @LLVMBr = 2,
        @LLVMSwitch = 3,
        @LLVMIndirectBr = 4,
        @LLVMInvoke = 5,
        @LLVMUnreachable = 7,
        @LLVMAdd = 8,
        @LLVMFAdd = 9,
        @LLVMSub = 10,
        @LLVMFSub = 11,
        @LLVMMul = 12,
        @LLVMFMul = 13,
        @LLVMUDiv = 14,
        @LLVMSDiv = 15,
        @LLVMFDiv = 16,
        @LLVMURem = 17,
        @LLVMSRem = 18,
        @LLVMFRem = 19,
        @LLVMShl = 20,
        @LLVMLShr = 21,
        @LLVMAShr = 22,
        @LLVMAnd = 23,
        @LLVMOr = 24,
        @LLVMXor = 25,
        @LLVMAlloca = 26,
        @LLVMLoad = 27,
        @LLVMStore = 28,
        @LLVMGetElementPtr = 29,
        @LLVMTrunc = 30,
        @LLVMZExt = 31,
        @LLVMSExt = 32,
        @LLVMFPToUI = 33,
        @LLVMFPToSI = 34,
        @LLVMUIToFP = 35,
        @LLVMSIToFP = 36,
        @LLVMFPTrunc = 37,
        @LLVMFPExt = 38,
        @LLVMPtrToInt = 39,
        @LLVMIntToPtr = 40,
        @LLVMBitCast = 41,
        @LLVMAddrSpaceCast = 60,
        @LLVMICmp = 42,
        @LLVMFCmp = 43,
        @LLVMPHI = 44,
        @LLVMCall = 45,
        @LLVMSelect = 46,
        @LLVMUserOp1 = 47,
        @LLVMUserOp2 = 48,
        @LLVMVAArg = 49,
        @LLVMExtractElement = 50,
        @LLVMInsertElement = 51,
        @LLVMShuffleVector = 52,
        @LLVMExtractValue = 53,
        @LLVMInsertValue = 54,
        @LLVMFence = 55,
        @LLVMAtomicCmpXchg = 56,
        @LLVMAtomicRMW = 57,
        @LLVMResume = 58,
        @LLVMLandingPad = 59,
        @LLVMCleanupRet = 61,
        @LLVMCatchRet = 62,
        @LLVMCatchPad = 63,
        @LLVMCleanupPad = 64,
        @LLVMCatchSwitch = 65
    }
    public enum @GeneratedName2
    {
        @LLVMVoidTypeKind,
        @LLVMHalfTypeKind,
        @LLVMFloatTypeKind,
        @LLVMDoubleTypeKind,
        @LLVMX86_FP80TypeKind,
        @LLVMFP128TypeKind,
        @LLVMPPC_FP128TypeKind,
        @LLVMLabelTypeKind,
        @LLVMIntegerTypeKind,
        @LLVMFunctionTypeKind,
        @LLVMStructTypeKind,
        @LLVMArrayTypeKind,
        @LLVMPointerTypeKind,
        @LLVMVectorTypeKind,
        @LLVMMetadataTypeKind,
        @LLVMX86_MMXTypeKind,
        @LLVMTokenTypeKind
    }
    public enum @GeneratedName3
    {
        @LLVMExternalLinkage,
        @LLVMAvailableExternallyLinkage,
        @LLVMLinkOnceAnyLinkage,
        @LLVMLinkOnceODRLinkage,
        @LLVMLinkOnceODRAutoHideLinkage,
        @LLVMWeakAnyLinkage,
        @LLVMWeakODRLinkage,
        @LLVMAppendingLinkage,
        @LLVMInternalLinkage,
        @LLVMPrivateLinkage,
        @LLVMDLLImportLinkage,
        @LLVMDLLExportLinkage,
        @LLVMExternalWeakLinkage,
        @LLVMGhostLinkage,
        @LLVMCommonLinkage,
        @LLVMLinkerPrivateLinkage,
        @LLVMLinkerPrivateWeakLinkage
    }
    public enum @GeneratedName4
    {
        @LLVMDefaultVisibility,
        @LLVMHiddenVisibility,
        @LLVMProtectedVisibility
    }
    public enum @GeneratedName5
    {
        @LLVMNoUnnamedAddr,
        @LLVMLocalUnnamedAddr,
        @LLVMGlobalUnnamedAddr
    }
    public enum @GeneratedName6
    {
        @LLVMDefaultStorageClass = 0,
        @LLVMDLLImportStorageClass = 1,
        @LLVMDLLExportStorageClass = 2
    }
    public enum @GeneratedName7
    {
        @LLVMCCallConv = 0,
        @LLVMFastCallConv = 8,
        @LLVMColdCallConv = 9,
        @LLVMGHCCallConv = 10,
        @LLVMHiPECallConv = 11,
        @LLVMWebKitJSCallConv = 12,
        @LLVMAnyRegCallConv = 13,
        @LLVMPreserveMostCallConv = 14,
        @LLVMPreserveAllCallConv = 15,
        @LLVMSwiftCallConv = 16,
        @LLVMCXXFASTTLSCallConv = 17,
        @LLVMX86StdcallCallConv = 64,
        @LLVMX86FastcallCallConv = 65,
        @LLVMARMAPCSCallConv = 66,
        @LLVMARMAAPCSCallConv = 67,
        @LLVMARMAAPCSVFPCallConv = 68,
        @LLVMMSP430INTRCallConv = 69,
        @LLVMX86ThisCallCallConv = 70,
        @LLVMPTXKernelCallConv = 71,
        @LLVMPTXDeviceCallConv = 72,
        @LLVMSPIRFUNCCallConv = 75,
        @LLVMSPIRKERNELCallConv = 76,
        @LLVMIntelOCLBICallConv = 77,
        @LLVMX8664SysVCallConv = 78,
        @LLVMWin64CallConv = 79,
        @LLVMX86VectorCallCallConv = 80,
        @LLVMHHVMCallConv = 81,
        @LLVMHHVMCCallConv = 82,
        @LLVMX86INTRCallConv = 83,
        @LLVMAVRINTRCallConv = 84,
        @LLVMAVRSIGNALCallConv = 85,
        @LLVMAVRBUILTINCallConv = 86,
        @LLVMAMDGPUVSCallConv = 87,
        @LLVMAMDGPUGSCallConv = 88,
        @LLVMAMDGPUPSCallConv = 89,
        @LLVMAMDGPUCSCallConv = 90,
        @LLVMAMDGPUKERNELCallConv = 91,
        @LLVMX86RegCallCallConv = 92,
        @LLVMAMDGPUHSCallConv = 93,
        @LLVMMSP430BUILTINCallConv = 94,
        @LLVMAMDGPULSCallConv = 95,
        @LLVMAMDGPUESCallConv = 96
    }
    public enum @GeneratedName8
    {
        @LLVMArgumentValueKind,
        @LLVMBasicBlockValueKind,
        @LLVMMemoryUseValueKind,
        @LLVMMemoryDefValueKind,
        @LLVMMemoryPhiValueKind,
        @LLVMFunctionValueKind,
        @LLVMGlobalAliasValueKind,
        @LLVMGlobalIFuncValueKind,
        @LLVMGlobalVariableValueKind,
        @LLVMBlockAddressValueKind,
        @LLVMConstantExprValueKind,
        @LLVMConstantArrayValueKind,
        @LLVMConstantStructValueKind,
        @LLVMConstantVectorValueKind,
        @LLVMUndefValueValueKind,
        @LLVMConstantAggregateZeroValueKind,
        @LLVMConstantDataArrayValueKind,
        @LLVMConstantDataVectorValueKind,
        @LLVMConstantIntValueKind,
        @LLVMConstantFPValueKind,
        @LLVMConstantPointerNullValueKind,
        @LLVMConstantTokenNoneValueKind,
        @LLVMMetadataAsValueValueKind,
        @LLVMInlineAsmValueKind,
        @LLVMInstructionValueKind
    }
    public enum @GeneratedName9
    {
        @LLVMIntEQ = 32,
        @LLVMIntNE,
        @LLVMIntUGT,
        @LLVMIntUGE,
        @LLVMIntULT,
        @LLVMIntULE,
        @LLVMIntSGT,
        @LLVMIntSGE,
        @LLVMIntSLT,
        @LLVMIntSLE
    }
    public enum @GeneratedName10
    {
        @LLVMRealPredicateFalse,
        @LLVMRealOEQ,
        @LLVMRealOGT,
        @LLVMRealOGE,
        @LLVMRealOLT,
        @LLVMRealOLE,
        @LLVMRealONE,
        @LLVMRealORD,
        @LLVMRealUNO,
        @LLVMRealUEQ,
        @LLVMRealUGT,
        @LLVMRealUGE,
        @LLVMRealULT,
        @LLVMRealULE,
        @LLVMRealUNE,
        @LLVMRealPredicateTrue
    }
    public enum @GeneratedName11
    {
        @LLVMLandingPadCatch,
        @LLVMLandingPadFilter
    }
    public enum @GeneratedName12
    {
        @LLVMNotThreadLocal = 0,
        @LLVMGeneralDynamicTLSModel,
        @LLVMLocalDynamicTLSModel,
        @LLVMInitialExecTLSModel,
        @LLVMLocalExecTLSModel
    }
    public enum @GeneratedName13
    {
        @LLVMAtomicOrderingNotAtomic = 0,
        @LLVMAtomicOrderingUnordered = 1,
        @LLVMAtomicOrderingMonotonic = 2,
        @LLVMAtomicOrderingAcquire = 4,
        @LLVMAtomicOrderingRelease = 5,
        @LLVMAtomicOrderingAcquireRelease = 6,
        @LLVMAtomicOrderingSequentiallyConsistent = 7
    }
    public enum @GeneratedName14
    {
        @LLVMAtomicRMWBinOpXchg,
        @LLVMAtomicRMWBinOpAdd,
        @LLVMAtomicRMWBinOpSub,
        @LLVMAtomicRMWBinOpAnd,
        @LLVMAtomicRMWBinOpNand,
        @LLVMAtomicRMWBinOpOr,
        @LLVMAtomicRMWBinOpXor,
        @LLVMAtomicRMWBinOpMax,
        @LLVMAtomicRMWBinOpMin,
        @LLVMAtomicRMWBinOpUMax,
        @LLVMAtomicRMWBinOpUMin
    }
    public enum @GeneratedName15
    {
        @LLVMDSError,
        @LLVMDSWarning,
        @LLVMDSRemark,
        @LLVMDSNote
    }
    public enum @GeneratedName16
    {
        @LLVMInlineAsmDialectATT,
        @LLVMInlineAsmDialectIntel
    }
    public enum @GeneratedName17
    {
        @LLVMModuleFlagBehaviorError,
        @LLVMModuleFlagBehaviorWarning,
        @LLVMModuleFlagBehaviorRequire,
        @LLVMModuleFlagBehaviorOverride,
        @LLVMModuleFlagBehaviorAppend,
        @LLVMModuleFlagBehaviorAppendUnique
    }
    public enum @GeneratedName18
    {
        @LLVMAttributeReturnIndex,
        @LLVMAttributeFunctionIndex
    }
    public enum @GeneratedName19
    {
        @LLVMDIFlagZero = 0,
        @LLVMDIFlagPrivate = 1,
        @LLVMDIFlagProtected = 2,
        @LLVMDIFlagPublic = 3,
        @LLVMDIFlagFwdDecl,
        @LLVMDIFlagAppleBlock,
        @LLVMDIFlagBlockByrefStruct,
        @LLVMDIFlagVirtual,
        @LLVMDIFlagArtificial,
        @LLVMDIFlagExplicit,
        @LLVMDIFlagPrototyped,
        @LLVMDIFlagObjcClassComplete,
        @LLVMDIFlagObjectPointer,
        @LLVMDIFlagVector,
        @LLVMDIFlagStaticMember,
        @LLVMDIFlagLValueReference,
        @LLVMDIFlagRValueReference,
        @LLVMDIFlagReserved,
        @LLVMDIFlagSingleInheritance,
        @LLVMDIFlagMultipleInheritance,
        @LLVMDIFlagVirtualInheritance,
        @LLVMDIFlagIntroducedVirtual,
        @LLVMDIFlagBitField,
        @LLVMDIFlagNoReturn,
        @LLVMDIFlagMainSubprogram,
        @LLVMDIFlagTypePassByValue,
        @LLVMDIFlagTypePassByReference,
        @LLVMDIFlagFixedEnum,
        @LLVMDIFlagThunk,
        @LLVMDIFlagTrivial,
        @LLVMDIFlagIndirectVirtualBase,
        @LLVMDIFlagAccessibility,
        @LLVMDIFlagPtrToMemberRep
    }
    public enum @GeneratedName20
    {
        @LLVMDWARFSourceLanguageC89,
        @LLVMDWARFSourceLanguageC,
        @LLVMDWARFSourceLanguageAda83,
        @LLVMDWARFSourceLanguageC_plus_plus,
        @LLVMDWARFSourceLanguageCobol74,
        @LLVMDWARFSourceLanguageCobol85,
        @LLVMDWARFSourceLanguageFortran77,
        @LLVMDWARFSourceLanguageFortran90,
        @LLVMDWARFSourceLanguagePascal83,
        @LLVMDWARFSourceLanguageModula2,
        @LLVMDWARFSourceLanguageJava,
        @LLVMDWARFSourceLanguageC99,
        @LLVMDWARFSourceLanguageAda95,
        @LLVMDWARFSourceLanguageFortran95,
        @LLVMDWARFSourceLanguagePLI,
        @LLVMDWARFSourceLanguageObjC,
        @LLVMDWARFSourceLanguageObjC_plus_plus,
        @LLVMDWARFSourceLanguageUPC,
        @LLVMDWARFSourceLanguageD,
        @LLVMDWARFSourceLanguagePython,
        @LLVMDWARFSourceLanguageOpenCL,
        @LLVMDWARFSourceLanguageGo,
        @LLVMDWARFSourceLanguageModula3,
        @LLVMDWARFSourceLanguageHaskell,
        @LLVMDWARFSourceLanguageC_plus_plus_03,
        @LLVMDWARFSourceLanguageC_plus_plus_11,
        @LLVMDWARFSourceLanguageOCaml,
        @LLVMDWARFSourceLanguageRust,
        @LLVMDWARFSourceLanguageC11,
        @LLVMDWARFSourceLanguageSwift,
        @LLVMDWARFSourceLanguageJulia,
        @LLVMDWARFSourceLanguageDylan,
        @LLVMDWARFSourceLanguageC_plus_plus_14,
        @LLVMDWARFSourceLanguageFortran03,
        @LLVMDWARFSourceLanguageFortran08,
        @LLVMDWARFSourceLanguageRenderScript,
        @LLVMDWARFSourceLanguageBLISS,
        @LLVMDWARFSourceLanguageMips_Assembler,
        @LLVMDWARFSourceLanguageGOOGLE_RenderScript,
        @LLVMDWARFSourceLanguageBORLAND_Delphi
    }
    public enum @GeneratedName21
    {
        @LLVMDWARFEmissionNone = 0,
        @LLVMDWARFEmissionFull,
        @LLVMDWARFEmissionLineTablesOnly
    }
    public enum @LLVMByteOrdering
    {
        @LLVMBigEndian,
        @LLVMLittleEndian
    }
    public enum @GeneratedName22
    {
        @LLVMCodeGenLevelNone,
        @LLVMCodeGenLevelLess,
        @LLVMCodeGenLevelDefault,
        @LLVMCodeGenLevelAggressive
    }
    public enum @GeneratedName23
    {
        @LLVMRelocDefault,
        @LLVMRelocStatic,
        @LLVMRelocPIC,
        @LLVMRelocDynamicNoPic
    }
    public enum @GeneratedName24
    {
        @LLVMCodeModelDefault,
        @LLVMCodeModelJITDefault,
        @LLVMCodeModelSmall,
        @LLVMCodeModelKernel,
        @LLVMCodeModelMedium,
        @LLVMCodeModelLarge
    }
    public enum @GeneratedName25
    {
        @LLVMAssemblyFile,
        @LLVMObjectFile
    }
    public enum @GeneratedName26
    {
        @LLVMLinkerDestroySource = 0,
        @LLVMLinkerPreserveSource_Removed = 1
    }
    public enum @GeneratedName27
    {
        @LLVMOrcErrSuccess = 0,
        @LLVMOrcErrGeneric
    }
    public partial struct LLVMBool
    {
        public LLVMBool(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMMemoryBufferRef
    {
        public LLVMMemoryBufferRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMContextRef
    {
        public LLVMContextRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMDiagnosticHandler
    {
        public LLVMDiagnosticHandler(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMDiagnosticSeverity
    {
        public LLVMDiagnosticSeverity(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMAttributeRef
    {
        public LLVMAttributeRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct uint64_t
    {
        public uint64_t(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMModuleRef
    {
        public LLVMModuleRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMModuleFlagBehavior
    {
        public LLVMModuleFlagBehavior(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMMetadataRef
    {
        public LLVMMetadataRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMValueRef
    {
        public LLVMValueRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMTypeRef
    {
        public LLVMTypeRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMTypeKind
    {
        public LLVMTypeKind(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMValueKind
    {
        public LLVMValueKind(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMUseRef
    {
        public LLVMUseRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMOpcode
    {
        public LLVMOpcode(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMLinkage
    {
        public LLVMLinkage(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMVisibility
    {
        public LLVMVisibility(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMDLLStorageClass
    {
        public LLVMDLLStorageClass(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMUnnamedAddr
    {
        public LLVMUnnamedAddr(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMThreadLocalMode
    {
        public LLVMThreadLocalMode(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMBasicBlockRef
    {
        public LLVMBasicBlockRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMIntPredicate
    {
        public LLVMIntPredicate(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMRealPredicate
    {
        public LLVMRealPredicate(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMBuilderRef
    {
        public LLVMBuilderRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMAtomicOrdering
    {
        public LLVMAtomicOrdering(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMModuleProviderRef
    {
        public LLVMModuleProviderRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct size_t
    {
        public size_t(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMPassRegistryRef
    {
        public LLVMPassRegistryRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMPassManagerRef
    {
        public LLVMPassManagerRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMDIBuilderRef
    {
        public LLVMDIBuilderRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct uint32_t
    {
        public uint32_t(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMDIFlags
    {
        public LLVMDIFlags(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMDisasmContextRef
    {
        public LLVMDisasmContextRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMTargetDataRef
    {
        public LLVMTargetDataRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMTargetRef
    {
        public LLVMTargetRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMTargetMachineRef
    {
        public LLVMTargetMachineRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMGenericValueRef
    {
        public LLVMGenericValueRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMMCJITMemoryManagerRef
    {
        public LLVMMCJITMemoryManagerRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMJITEventListenerRef
    {
        public LLVMJITEventListenerRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMObjectFileRef
    {
        public LLVMObjectFileRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMSectionIteratorRef
    {
        public LLVMSectionIteratorRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMSymbolIteratorRef
    {
        public LLVMSymbolIteratorRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMRelocationIteratorRef
    {
        public LLVMRelocationIteratorRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMOrcJITStackRef
    {
        public LLVMOrcJITStackRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMOrcErrorCode
    {
        public LLVMOrcErrorCode(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    public partial struct LLVMPassManagerBuilderRef
    {
        public LLVMPassManagerBuilderRef(IntPtr pointer)
        {
            this.Pointer = pointer;
        }
        public IntPtr Pointer;
    }

    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMVerifyModule")]
    public static extern LLVMBool LLVMVerifyModule(
    LLVMModuleRef:struct LLVMOpaqueModule * M, LLVMVerifierFailureAction:LLVMVerifierFailureAction Action, char** OutMessage);


            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMVerifyFunction")]
    public static extern LLVMBool LLVMVerifyFunction(
LLVMValueRef:struct LLVMOpaqueValue * Fn, LLVMVerifierFailureAction:LLVMVerifierFailureAction Action);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMViewFunctionCFG")]
    public static extern void LLVMViewFunctionCFG(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMViewFunctionCFGOnly")]
    public static extern void LLVMViewFunctionCFGOnly(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMParseBitcode")]
    public static extern LLVMBool LLVMParseBitcode(
LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf, LLVMModuleRef * OutModule, char** OutMessage);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMParseBitcode2")]
    public static extern LLVMBool LLVMParseBitcode2(
LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf, LLVMModuleRef * OutModule);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMParseBitcodeInContext")]
    public static extern LLVMBool LLVMParseBitcodeInContext(
LLVMContextRef:struct LLVMOpaqueContext * ContextRef, LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf, LLVMModuleRef * OutModule, char** OutMessage);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMParseBitcodeInContext2")]
    public static extern LLVMBool LLVMParseBitcodeInContext2(
LLVMContextRef:struct LLVMOpaqueContext * ContextRef, LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf, LLVMModuleRef * OutModule);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetBitcodeModuleInContext")]
    public static extern LLVMBool LLVMGetBitcodeModuleInContext(
LLVMContextRef:struct LLVMOpaqueContext * ContextRef, LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf, LLVMModuleRef * OutM, char** OutMessage);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetBitcodeModuleInContext2")]
    public static extern LLVMBool LLVMGetBitcodeModuleInContext2(
LLVMContextRef:struct LLVMOpaqueContext * ContextRef, LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf, LLVMModuleRef * OutM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetBitcodeModule")]
    public static extern LLVMBool LLVMGetBitcodeModule(
LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf, LLVMModuleRef * OutM, char** OutMessage);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetBitcodeModule2")]
    public static extern LLVMBool LLVMGetBitcodeModule2(
LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf, LLVMModuleRef * OutM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMWriteBitcodeToFile")]
    public static extern int LLVMWriteBitcodeToFile(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Path);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMWriteBitcodeToFD")]
    public static extern int LLVMWriteBitcodeToFD(
LLVMModuleRef:struct LLVMOpaqueModule * M, int FD, int ShouldClose, int Unbuffered);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMWriteBitcodeToFileHandle")]
    public static extern int LLVMWriteBitcodeToFileHandle(
LLVMModuleRef:struct LLVMOpaqueModule * M, int Handle);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMWriteBitcodeToMemoryBuffer")]
    public static extern LLVMMemoryBufferRef LLVMWriteBitcodeToMemoryBuffer(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInstallFatalErrorHandler")]
    public static extern void LLVMInstallFatalErrorHandler(
LLVMFatalErrorHandler:void (*)(const char*) Handler);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeCore")]
    public static extern void LLVMInitializeCore(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateMessage")]
    public static extern char* LLVMCreateMessage(
const char* Message);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeMessage")]
    public static extern void LLVMDisposeMessage(
char* Message);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMContextSetDiagnosticHandler")]
    public static extern void LLVMContextSetDiagnosticHandler(
LLVMContextRef:struct LLVMOpaqueContext * C, LLVMDiagnosticHandler:void (*) (LLVMDiagnosticInfoRef, void*) Handler, void* DiagnosticContext);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMContextGetDiagnosticHandler")]
    public static extern LLVMDiagnosticHandler LLVMContextGetDiagnosticHandler(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMContextGetDiagnosticContext")]
    public static extern void* LLVMContextGetDiagnosticContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMContextSetYieldCallback")]
    public static extern void LLVMContextSetYieldCallback(
LLVMContextRef:struct LLVMOpaqueContext * C, LLVMYieldCallback:void (*) (LLVMContextRef, void*) Callback, void* OpaqueHandle);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMContextDispose")]
    public static extern void LLVMContextDispose(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetDiagInfoDescription")]
    public static extern char* LLVMGetDiagInfoDescription(
LLVMDiagnosticInfoRef:struct LLVMOpaqueDiagnosticInfo * DI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetDiagInfoSeverity")]
    public static extern LLVMDiagnosticSeverity LLVMGetDiagInfoSeverity(
LLVMDiagnosticInfoRef:struct LLVMOpaqueDiagnosticInfo * DI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetMDKindIDInContext")]
    public static extern unsigned int LLVMGetMDKindIDInContext(
    LLVMContextRef:struct LLVMOpaqueContext * C, const char* Name, unsigned int SLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetMDKindID")]
    public static extern unsigned int LLVMGetMDKindID(
const char* Name, unsigned int SLen);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetEnumAttributeKindForName")]
    public static extern unsigned int LLVMGetEnumAttributeKindForName(
const char* Name, size_t:unsigned long long SLen);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateEnumAttribute")]
    public static extern LLVMAttributeRef LLVMCreateEnumAttribute(
LLVMContextRef:struct LLVMOpaqueContext * C, unsigned int KindID, uint64_t:unsigned long long Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetEnumAttributeKind")]
    public static extern unsigned int LLVMGetEnumAttributeKind(
    LLVMAttributeRef:struct LLVMOpaqueAttributeRef * A);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetEnumAttributeValue")]
    public static extern uint64_t LLVMGetEnumAttributeValue(
LLVMAttributeRef:struct LLVMOpaqueAttributeRef * A);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateStringAttribute")]
    public static extern LLVMAttributeRef LLVMCreateStringAttribute(
LLVMContextRef:struct LLVMOpaqueContext * C, const char* K, unsigned int KLength, const char* V, unsigned int VLength);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetStringAttributeKind")]
    public static extern const char* LLVMGetStringAttributeKind(
LLVMAttributeRef:struct LLVMOpaqueAttributeRef * A, unsigned int* Length);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetStringAttributeValue")]
    public static extern const char* LLVMGetStringAttributeValue(
LLVMAttributeRef:struct LLVMOpaqueAttributeRef * A, unsigned int* Length);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsEnumAttribute")]
    public static extern LLVMBool LLVMIsEnumAttribute(
LLVMAttributeRef:struct LLVMOpaqueAttributeRef * A);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsStringAttribute")]
    public static extern LLVMBool LLVMIsStringAttribute(
LLVMAttributeRef:struct LLVMOpaqueAttributeRef * A);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMModuleCreateWithName")]
    public static extern LLVMModuleRef LLVMModuleCreateWithName(
const char* ModuleID);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMModuleCreateWithNameInContext")]
    public static extern LLVMModuleRef LLVMModuleCreateWithNameInContext(
const char* ModuleID, LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCloneModule")]
    public static extern LLVMModuleRef LLVMCloneModule(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeModule")]
    public static extern void LLVMDisposeModule(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetModuleIdentifier")]
    public static extern const char* LLVMGetModuleIdentifier(
LLVMModuleRef:struct LLVMOpaqueModule * M, size_t * Len);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetModuleIdentifier")]
    public static extern void LLVMSetModuleIdentifier(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Ident, size_t:unsigned long long Len);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSourceFileName")]
    public static extern const char* LLVMGetSourceFileName(
LLVMModuleRef:struct LLVMOpaqueModule * M, size_t * Len);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetSourceFileName")]
    public static extern void LLVMSetSourceFileName(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Name, size_t:unsigned long long Len);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetDataLayoutStr")]
    public static extern const char* LLVMGetDataLayoutStr(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetDataLayout")]
    public static extern const char* LLVMGetDataLayout(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetDataLayout")]
    public static extern void LLVMSetDataLayout(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* DataLayoutStr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTarget")]
    public static extern const char* LLVMGetTarget(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetTarget")]
    public static extern void LLVMSetTarget(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Triple);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCopyModuleFlagsMetadata")]
    public static extern LLVMModuleFlagEntry* LLVMCopyModuleFlagsMetadata(
LLVMModuleRef:struct LLVMOpaqueModule * M, size_t * Len);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeModuleFlagsMetadata")]
    public static extern void LLVMDisposeModuleFlagsMetadata(
LLVMModuleFlagEntry* Entries);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMModuleFlagEntriesGetFlagBehavior")]
    public static extern LLVMModuleFlagBehavior LLVMModuleFlagEntriesGetFlagBehavior(
LLVMModuleFlagEntry* Entries, unsigned int Index);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMModuleFlagEntriesGetKey")]
    public static extern const char* LLVMModuleFlagEntriesGetKey(
LLVMModuleFlagEntry * Entries, unsigned int Index, size_t * Len);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMModuleFlagEntriesGetMetadata")]
    public static extern LLVMMetadataRef LLVMModuleFlagEntriesGetMetadata(
LLVMModuleFlagEntry* Entries, unsigned int Index);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetModuleFlag")]
    public static extern LLVMMetadataRef LLVMGetModuleFlag(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Key, size_t:unsigned long long KeyLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddModuleFlag")]
    public static extern void LLVMAddModuleFlag(
LLVMModuleRef:struct LLVMOpaqueModule * M, LLVMModuleFlagBehavior:LLVMModuleFlagBehavior Behavior, const char* Key, size_t:unsigned long long KeyLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDumpModule")]
    public static extern void LLVMDumpModule(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPrintModuleToFile")]
    public static extern LLVMBool LLVMPrintModuleToFile(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Filename, char** ErrorMessage);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPrintModuleToString")]
    public static extern char* LLVMPrintModuleToString(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetModuleInlineAsm")]
    public static extern const char* LLVMGetModuleInlineAsm(
LLVMModuleRef:struct LLVMOpaqueModule * M, size_t * Len);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetModuleInlineAsm2")]
    public static extern void LLVMSetModuleInlineAsm2(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Asm, size_t:unsigned long long Len);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAppendModuleInlineAsm")]
    public static extern void LLVMAppendModuleInlineAsm(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Asm, size_t:unsigned long long Len);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetInlineAsm")]
    public static extern LLVMValueRef LLVMGetInlineAsm(
LLVMTypeRef:struct LLVMOpaqueType * Ty, char* AsmString, size_t:unsigned long long AsmStringSize, char* Constraints, size_t:unsigned long long ConstraintsSize, LLVMBool:int HasSideEffects, LLVMBool:int IsAlignStack, LLVMInlineAsmDialect:LLVMInlineAsmDialect Dialect);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetModuleContext")]
    public static extern LLVMContextRef LLVMGetModuleContext(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTypeByName")]
    public static extern LLVMTypeRef LLVMGetTypeByName(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNamedMetadataNumOperands")]
    public static extern unsigned int LLVMGetNamedMetadataNumOperands(
    LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNamedMetadataOperands")]
    public static extern void LLVMGetNamedMetadataOperands(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Name, LLVMValueRef * Dest);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddNamedMetadataOperand")]
    public static extern void LLVMAddNamedMetadataOperand(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Name, LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddFunction")]
    public static extern LLVMValueRef LLVMAddFunction(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Name, LLVMTypeRef:struct LLVMOpaqueType * FunctionTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNamedFunction")]
    public static extern LLVMValueRef LLVMGetNamedFunction(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetFirstFunction")]
    public static extern LLVMValueRef LLVMGetFirstFunction(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetLastFunction")]
    public static extern LLVMValueRef LLVMGetLastFunction(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNextFunction")]
    public static extern LLVMValueRef LLVMGetNextFunction(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetPreviousFunction")]
    public static extern LLVMValueRef LLVMGetPreviousFunction(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetModuleInlineAsm")]
    public static extern void LLVMSetModuleInlineAsm(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Asm);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTypeKind")]
    public static extern LLVMTypeKind LLVMGetTypeKind(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMTypeIsSized")]
    public static extern LLVMBool LLVMTypeIsSized(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTypeContext")]
    public static extern LLVMContextRef LLVMGetTypeContext(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDumpType")]
    public static extern void LLVMDumpType(
LLVMTypeRef:struct LLVMOpaqueType * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPrintTypeToString")]
    public static extern char* LLVMPrintTypeToString(
LLVMTypeRef:struct LLVMOpaqueType * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInt1TypeInContext")]
    public static extern LLVMTypeRef LLVMInt1TypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInt8TypeInContext")]
    public static extern LLVMTypeRef LLVMInt8TypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInt16TypeInContext")]
    public static extern LLVMTypeRef LLVMInt16TypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInt32TypeInContext")]
    public static extern LLVMTypeRef LLVMInt32TypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInt64TypeInContext")]
    public static extern LLVMTypeRef LLVMInt64TypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInt128TypeInContext")]
    public static extern LLVMTypeRef LLVMInt128TypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIntTypeInContext")]
    public static extern LLVMTypeRef LLVMIntTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C, unsigned int NumBits);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIntType")]
    public static extern LLVMTypeRef LLVMIntType(
unsigned int NumBits);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetIntTypeWidth")]
    public static extern unsigned int LLVMGetIntTypeWidth(
    LLVMTypeRef:struct LLVMOpaqueType * IntegerTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMHalfTypeInContext")]
    public static extern LLVMTypeRef LLVMHalfTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMFloatTypeInContext")]
    public static extern LLVMTypeRef LLVMFloatTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDoubleTypeInContext")]
    public static extern LLVMTypeRef LLVMDoubleTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMX86FP80TypeInContext")]
    public static extern LLVMTypeRef LLVMX86FP80TypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMFP128TypeInContext")]
    public static extern LLVMTypeRef LLVMFP128TypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPPCFP128TypeInContext")]
    public static extern LLVMTypeRef LLVMPPCFP128TypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMFunctionType")]
    public static extern LLVMTypeRef LLVMFunctionType(
LLVMTypeRef:struct LLVMOpaqueType * ReturnType, LLVMTypeRef * ParamTypes, unsigned int ParamCount, LLVMBool:int IsVarArg);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsFunctionVarArg")]
    public static extern LLVMBool LLVMIsFunctionVarArg(
LLVMTypeRef:struct LLVMOpaqueType * FunctionTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetReturnType")]
    public static extern LLVMTypeRef LLVMGetReturnType(
LLVMTypeRef:struct LLVMOpaqueType * FunctionTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCountParamTypes")]
    public static extern unsigned int LLVMCountParamTypes(
    LLVMTypeRef:struct LLVMOpaqueType * FunctionTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetParamTypes")]
    public static extern void LLVMGetParamTypes(
LLVMTypeRef:struct LLVMOpaqueType * FunctionTy, LLVMTypeRef * Dest);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMStructTypeInContext")]
    public static extern LLVMTypeRef LLVMStructTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C, LLVMTypeRef * ElementTypes, unsigned int ElementCount, LLVMBool:int Packed);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMStructType")]
    public static extern LLVMTypeRef LLVMStructType(
LLVMTypeRef* ElementTypes, unsigned int ElementCount, LLVMBool:int Packed);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMStructCreateNamed")]
    public static extern LLVMTypeRef LLVMStructCreateNamed(
LLVMContextRef:struct LLVMOpaqueContext * C, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetStructName")]
    public static extern const char* LLVMGetStructName(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMStructSetBody")]
    public static extern void LLVMStructSetBody(
LLVMTypeRef:struct LLVMOpaqueType * StructTy, LLVMTypeRef * ElementTypes, unsigned int ElementCount, LLVMBool:int Packed);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCountStructElementTypes")]
    public static extern unsigned int LLVMCountStructElementTypes(
    LLVMTypeRef:struct LLVMOpaqueType * StructTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetStructElementTypes")]
    public static extern void LLVMGetStructElementTypes(
LLVMTypeRef:struct LLVMOpaqueType * StructTy, LLVMTypeRef * Dest);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMStructGetTypeAtIndex")]
    public static extern LLVMTypeRef LLVMStructGetTypeAtIndex(
LLVMTypeRef:struct LLVMOpaqueType * StructTy, unsigned int i);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsPackedStruct")]
    public static extern LLVMBool LLVMIsPackedStruct(
LLVMTypeRef:struct LLVMOpaqueType * StructTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsOpaqueStruct")]
    public static extern LLVMBool LLVMIsOpaqueStruct(
LLVMTypeRef:struct LLVMOpaqueType * StructTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetElementType")]
    public static extern LLVMTypeRef LLVMGetElementType(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSubtypes")]
    public static extern void LLVMGetSubtypes(
LLVMTypeRef:struct LLVMOpaqueType * Tp, LLVMTypeRef * Arr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNumContainedTypes")]
    public static extern unsigned int LLVMGetNumContainedTypes(
    LLVMTypeRef:struct LLVMOpaqueType * Tp);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMArrayType")]
    public static extern LLVMTypeRef LLVMArrayType(
LLVMTypeRef:struct LLVMOpaqueType * ElementType, unsigned int ElementCount);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetArrayLength")]
    public static extern unsigned int LLVMGetArrayLength(
    LLVMTypeRef:struct LLVMOpaqueType * ArrayTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPointerType")]
    public static extern LLVMTypeRef LLVMPointerType(
LLVMTypeRef:struct LLVMOpaqueType * ElementType, unsigned int AddressSpace);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetPointerAddressSpace")]
    public static extern unsigned int LLVMGetPointerAddressSpace(
    LLVMTypeRef:struct LLVMOpaqueType * PointerTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMVectorType")]
    public static extern LLVMTypeRef LLVMVectorType(
LLVMTypeRef:struct LLVMOpaqueType * ElementType, unsigned int ElementCount);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetVectorSize")]
    public static extern unsigned int LLVMGetVectorSize(
    LLVMTypeRef:struct LLVMOpaqueType * VectorTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMVoidTypeInContext")]
    public static extern LLVMTypeRef LLVMVoidTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMLabelTypeInContext")]
    public static extern LLVMTypeRef LLVMLabelTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMX86MMXTypeInContext")]
    public static extern LLVMTypeRef LLVMX86MMXTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMTokenTypeInContext")]
    public static extern LLVMTypeRef LLVMTokenTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMetadataTypeInContext")]
    public static extern LLVMTypeRef LLVMMetadataTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMTypeOf")]
    public static extern LLVMTypeRef LLVMTypeOf(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetValueKind")]
    public static extern LLVMValueKind LLVMGetValueKind(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetValueName2")]
    public static extern const char* LLVMGetValueName2(
LLVMValueRef:struct LLVMOpaqueValue * Val, size_t * Length);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetValueName2")]
    public static extern void LLVMSetValueName2(
LLVMValueRef:struct LLVMOpaqueValue * Val, const char* Name, size_t:unsigned long long NameLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDumpValue")]
    public static extern void LLVMDumpValue(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPrintValueToString")]
    public static extern char* LLVMPrintValueToString(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMReplaceAllUsesWith")]
    public static extern void LLVMReplaceAllUsesWith(
LLVMValueRef:struct LLVMOpaqueValue * OldVal, LLVMValueRef:struct LLVMOpaqueValue * NewVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsConstant")]
    public static extern LLVMBool LLVMIsConstant(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsUndef")]
    public static extern LLVMBool LLVMIsUndef(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAArgument")]
    public static extern LLVMValueRef LLVMIsAArgument(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsABasicBlock")]
    public static extern LLVMValueRef LLVMIsABasicBlock(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAInlineAsm")]
    public static extern LLVMValueRef LLVMIsAInlineAsm(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAUser")]
    public static extern LLVMValueRef LLVMIsAUser(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstant")]
    public static extern LLVMValueRef LLVMIsAConstant(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsABlockAddress")]
    public static extern LLVMValueRef LLVMIsABlockAddress(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantAggregateZero")]
    public static extern LLVMValueRef LLVMIsAConstantAggregateZero(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantArray")]
    public static extern LLVMValueRef LLVMIsAConstantArray(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantDataSequential")]
    public static extern LLVMValueRef LLVMIsAConstantDataSequential(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantDataArray")]
    public static extern LLVMValueRef LLVMIsAConstantDataArray(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantDataVector")]
    public static extern LLVMValueRef LLVMIsAConstantDataVector(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantExpr")]
    public static extern LLVMValueRef LLVMIsAConstantExpr(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantFP")]
    public static extern LLVMValueRef LLVMIsAConstantFP(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantInt")]
    public static extern LLVMValueRef LLVMIsAConstantInt(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantPointerNull")]
    public static extern LLVMValueRef LLVMIsAConstantPointerNull(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantStruct")]
    public static extern LLVMValueRef LLVMIsAConstantStruct(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantTokenNone")]
    public static extern LLVMValueRef LLVMIsAConstantTokenNone(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAConstantVector")]
    public static extern LLVMValueRef LLVMIsAConstantVector(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAGlobalValue")]
    public static extern LLVMValueRef LLVMIsAGlobalValue(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAGlobalAlias")]
    public static extern LLVMValueRef LLVMIsAGlobalAlias(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAGlobalObject")]
    public static extern LLVMValueRef LLVMIsAGlobalObject(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAFunction")]
    public static extern LLVMValueRef LLVMIsAFunction(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAGlobalVariable")]
    public static extern LLVMValueRef LLVMIsAGlobalVariable(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAUndefValue")]
    public static extern LLVMValueRef LLVMIsAUndefValue(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAInstruction")]
    public static extern LLVMValueRef LLVMIsAInstruction(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsABinaryOperator")]
    public static extern LLVMValueRef LLVMIsABinaryOperator(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsACallInst")]
    public static extern LLVMValueRef LLVMIsACallInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAIntrinsicInst")]
    public static extern LLVMValueRef LLVMIsAIntrinsicInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsADbgInfoIntrinsic")]
    public static extern LLVMValueRef LLVMIsADbgInfoIntrinsic(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsADbgDeclareInst")]
    public static extern LLVMValueRef LLVMIsADbgDeclareInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAMemIntrinsic")]
    public static extern LLVMValueRef LLVMIsAMemIntrinsic(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAMemCpyInst")]
    public static extern LLVMValueRef LLVMIsAMemCpyInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAMemMoveInst")]
    public static extern LLVMValueRef LLVMIsAMemMoveInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAMemSetInst")]
    public static extern LLVMValueRef LLVMIsAMemSetInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsACmpInst")]
    public static extern LLVMValueRef LLVMIsACmpInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAFCmpInst")]
    public static extern LLVMValueRef LLVMIsAFCmpInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAICmpInst")]
    public static extern LLVMValueRef LLVMIsAICmpInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAExtractElementInst")]
    public static extern LLVMValueRef LLVMIsAExtractElementInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAGetElementPtrInst")]
    public static extern LLVMValueRef LLVMIsAGetElementPtrInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAInsertElementInst")]
    public static extern LLVMValueRef LLVMIsAInsertElementInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAInsertValueInst")]
    public static extern LLVMValueRef LLVMIsAInsertValueInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsALandingPadInst")]
    public static extern LLVMValueRef LLVMIsALandingPadInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAPHINode")]
    public static extern LLVMValueRef LLVMIsAPHINode(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsASelectInst")]
    public static extern LLVMValueRef LLVMIsASelectInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAShuffleVectorInst")]
    public static extern LLVMValueRef LLVMIsAShuffleVectorInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAStoreInst")]
    public static extern LLVMValueRef LLVMIsAStoreInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsATerminatorInst")]
    public static extern LLVMValueRef LLVMIsATerminatorInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsABranchInst")]
    public static extern LLVMValueRef LLVMIsABranchInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAIndirectBrInst")]
    public static extern LLVMValueRef LLVMIsAIndirectBrInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAInvokeInst")]
    public static extern LLVMValueRef LLVMIsAInvokeInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAReturnInst")]
    public static extern LLVMValueRef LLVMIsAReturnInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsASwitchInst")]
    public static extern LLVMValueRef LLVMIsASwitchInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAUnreachableInst")]
    public static extern LLVMValueRef LLVMIsAUnreachableInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAResumeInst")]
    public static extern LLVMValueRef LLVMIsAResumeInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsACleanupReturnInst")]
    public static extern LLVMValueRef LLVMIsACleanupReturnInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsACatchReturnInst")]
    public static extern LLVMValueRef LLVMIsACatchReturnInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAFuncletPadInst")]
    public static extern LLVMValueRef LLVMIsAFuncletPadInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsACatchPadInst")]
    public static extern LLVMValueRef LLVMIsACatchPadInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsACleanupPadInst")]
    public static extern LLVMValueRef LLVMIsACleanupPadInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAUnaryInstruction")]
    public static extern LLVMValueRef LLVMIsAUnaryInstruction(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAAllocaInst")]
    public static extern LLVMValueRef LLVMIsAAllocaInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsACastInst")]
    public static extern LLVMValueRef LLVMIsACastInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAAddrSpaceCastInst")]
    public static extern LLVMValueRef LLVMIsAAddrSpaceCastInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsABitCastInst")]
    public static extern LLVMValueRef LLVMIsABitCastInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAFPExtInst")]
    public static extern LLVMValueRef LLVMIsAFPExtInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAFPToSIInst")]
    public static extern LLVMValueRef LLVMIsAFPToSIInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAFPToUIInst")]
    public static extern LLVMValueRef LLVMIsAFPToUIInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAFPTruncInst")]
    public static extern LLVMValueRef LLVMIsAFPTruncInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAIntToPtrInst")]
    public static extern LLVMValueRef LLVMIsAIntToPtrInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAPtrToIntInst")]
    public static extern LLVMValueRef LLVMIsAPtrToIntInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsASExtInst")]
    public static extern LLVMValueRef LLVMIsASExtInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsASIToFPInst")]
    public static extern LLVMValueRef LLVMIsASIToFPInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsATruncInst")]
    public static extern LLVMValueRef LLVMIsATruncInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAUIToFPInst")]
    public static extern LLVMValueRef LLVMIsAUIToFPInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAZExtInst")]
    public static extern LLVMValueRef LLVMIsAZExtInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAExtractValueInst")]
    public static extern LLVMValueRef LLVMIsAExtractValueInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsALoadInst")]
    public static extern LLVMValueRef LLVMIsALoadInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAVAArgInst")]
    public static extern LLVMValueRef LLVMIsAVAArgInst(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAMDNode")]
    public static extern LLVMValueRef LLVMIsAMDNode(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAMDString")]
    public static extern LLVMValueRef LLVMIsAMDString(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetValueName")]
    public static extern const char* LLVMGetValueName(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetValueName")]
    public static extern void LLVMSetValueName(
LLVMValueRef:struct LLVMOpaqueValue * Val, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetFirstUse")]
    public static extern LLVMUseRef LLVMGetFirstUse(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNextUse")]
    public static extern LLVMUseRef LLVMGetNextUse(
LLVMUseRef:struct LLVMOpaqueUse * U);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetUser")]
    public static extern LLVMValueRef LLVMGetUser(
LLVMUseRef:struct LLVMOpaqueUse * U);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetUsedValue")]
    public static extern LLVMValueRef LLVMGetUsedValue(
LLVMUseRef:struct LLVMOpaqueUse * U);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetOperand")]
    public static extern LLVMValueRef LLVMGetOperand(
LLVMValueRef:struct LLVMOpaqueValue * Val, unsigned int Index);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetOperandUse")]
    public static extern LLVMUseRef LLVMGetOperandUse(
LLVMValueRef:struct LLVMOpaqueValue * Val, unsigned int Index);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetOperand")]
    public static extern void LLVMSetOperand(
LLVMValueRef:struct LLVMOpaqueValue * User, unsigned int Index, LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNumOperands")]
    public static extern int LLVMGetNumOperands(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNull")]
    public static extern LLVMValueRef LLVMConstNull(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstAllOnes")]
    public static extern LLVMValueRef LLVMConstAllOnes(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetUndef")]
    public static extern LLVMValueRef LLVMGetUndef(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsNull")]
    public static extern LLVMBool LLVMIsNull(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstPointerNull")]
    public static extern LLVMValueRef LLVMConstPointerNull(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstInt")]
    public static extern LLVMValueRef LLVMConstInt(
LLVMTypeRef:struct LLVMOpaqueType * IntTy, ulong N, LLVMBool:int SignExtend);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstIntOfArbitraryPrecision")]
    public static extern LLVMValueRef LLVMConstIntOfArbitraryPrecision(
LLVMTypeRef:struct LLVMOpaqueType * IntTy, unsigned int NumWords, const uint64_t*:const uint64_t* Words);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstIntOfString")]
    public static extern LLVMValueRef LLVMConstIntOfString(
LLVMTypeRef:struct LLVMOpaqueType * IntTy, const char* Text, uint8_t:unsigned char Radix);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstIntOfStringAndSize")]
    public static extern LLVMValueRef LLVMConstIntOfStringAndSize(
LLVMTypeRef:struct LLVMOpaqueType * IntTy, const char* Text, unsigned int SLen, uint8_t:unsigned char Radix);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstReal")]
    public static extern LLVMValueRef LLVMConstReal(
LLVMTypeRef:struct LLVMOpaqueType * RealTy, double N);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstRealOfString")]
    public static extern LLVMValueRef LLVMConstRealOfString(
LLVMTypeRef:struct LLVMOpaqueType * RealTy, const char* Text);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstRealOfStringAndSize")]
    public static extern LLVMValueRef LLVMConstRealOfStringAndSize(
LLVMTypeRef:struct LLVMOpaqueType * RealTy, const char* Text, unsigned int SLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstIntGetZExtValue")]
    public static extern unsigned long long LLVMConstIntGetZExtValue(
    LLVMValueRef:struct LLVMOpaqueValue * ConstantVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstIntGetSExtValue")]
    public static extern long long LLVMConstIntGetSExtValue(
    LLVMValueRef:struct LLVMOpaqueValue * ConstantVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstRealGetDouble")]
    public static extern double LLVMConstRealGetDouble(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMBool * losesInfo);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstStringInContext")]
    public static extern LLVMValueRef LLVMConstStringInContext(
LLVMContextRef:struct LLVMOpaqueContext * C, const char* Str, unsigned int Length, LLVMBool:int DontNullTerminate);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstString")]
    public static extern LLVMValueRef LLVMConstString(
const char* Str, unsigned int Length, LLVMBool:int DontNullTerminate);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsConstantString")]
    public static extern LLVMBool LLVMIsConstantString(
LLVMValueRef:struct LLVMOpaqueValue * c);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetAsString")]
    public static extern const char* LLVMGetAsString(
LLVMValueRef:struct LLVMOpaqueValue * c, size_t * Length);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstStructInContext")]
    public static extern LLVMValueRef LLVMConstStructInContext(
LLVMContextRef:struct LLVMOpaqueContext * C, LLVMValueRef * ConstantVals, unsigned int Count, LLVMBool:int Packed);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstStruct")]
    public static extern LLVMValueRef LLVMConstStruct(
LLVMValueRef* ConstantVals, unsigned int Count, LLVMBool:int Packed);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstArray")]
    public static extern LLVMValueRef LLVMConstArray(
LLVMTypeRef:struct LLVMOpaqueType * ElementTy, LLVMValueRef * ConstantVals, unsigned int Length);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNamedStruct")]
    public static extern LLVMValueRef LLVMConstNamedStruct(
LLVMTypeRef:struct LLVMOpaqueType * StructTy, LLVMValueRef * ConstantVals, unsigned int Count);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetElementAsConstant")]
    public static extern LLVMValueRef LLVMGetElementAsConstant(
LLVMValueRef:struct LLVMOpaqueValue * C, unsigned int idx);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstVector")]
    public static extern LLVMValueRef LLVMConstVector(
LLVMValueRef* ScalarConstantVals, unsigned int Size);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetConstOpcode")]
    public static extern LLVMOpcode LLVMGetConstOpcode(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAlignOf")]
    public static extern LLVMValueRef LLVMAlignOf(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSizeOf")]
    public static extern LLVMValueRef LLVMSizeOf(
LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNeg")]
    public static extern LLVMValueRef LLVMConstNeg(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNSWNeg")]
    public static extern LLVMValueRef LLVMConstNSWNeg(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNUWNeg")]
    public static extern LLVMValueRef LLVMConstNUWNeg(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFNeg")]
    public static extern LLVMValueRef LLVMConstFNeg(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNot")]
    public static extern LLVMValueRef LLVMConstNot(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstAdd")]
    public static extern LLVMValueRef LLVMConstAdd(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNSWAdd")]
    public static extern LLVMValueRef LLVMConstNSWAdd(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNUWAdd")]
    public static extern LLVMValueRef LLVMConstNUWAdd(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFAdd")]
    public static extern LLVMValueRef LLVMConstFAdd(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstSub")]
    public static extern LLVMValueRef LLVMConstSub(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNSWSub")]
    public static extern LLVMValueRef LLVMConstNSWSub(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNUWSub")]
    public static extern LLVMValueRef LLVMConstNUWSub(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFSub")]
    public static extern LLVMValueRef LLVMConstFSub(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstMul")]
    public static extern LLVMValueRef LLVMConstMul(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNSWMul")]
    public static extern LLVMValueRef LLVMConstNSWMul(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstNUWMul")]
    public static extern LLVMValueRef LLVMConstNUWMul(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFMul")]
    public static extern LLVMValueRef LLVMConstFMul(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstUDiv")]
    public static extern LLVMValueRef LLVMConstUDiv(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstExactUDiv")]
    public static extern LLVMValueRef LLVMConstExactUDiv(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstSDiv")]
    public static extern LLVMValueRef LLVMConstSDiv(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstExactSDiv")]
    public static extern LLVMValueRef LLVMConstExactSDiv(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFDiv")]
    public static extern LLVMValueRef LLVMConstFDiv(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstURem")]
    public static extern LLVMValueRef LLVMConstURem(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstSRem")]
    public static extern LLVMValueRef LLVMConstSRem(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFRem")]
    public static extern LLVMValueRef LLVMConstFRem(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstAnd")]
    public static extern LLVMValueRef LLVMConstAnd(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstOr")]
    public static extern LLVMValueRef LLVMConstOr(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstXor")]
    public static extern LLVMValueRef LLVMConstXor(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstICmp")]
    public static extern LLVMValueRef LLVMConstICmp(
LLVMIntPredicate:LLVMIntPredicate Predicate, LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFCmp")]
    public static extern LLVMValueRef LLVMConstFCmp(
LLVMRealPredicate:LLVMRealPredicate Predicate, LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstShl")]
    public static extern LLVMValueRef LLVMConstShl(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstLShr")]
    public static extern LLVMValueRef LLVMConstLShr(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstAShr")]
    public static extern LLVMValueRef LLVMConstAShr(
LLVMValueRef:struct LLVMOpaqueValue * LHSConstant, LLVMValueRef:struct LLVMOpaqueValue * RHSConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstGEP")]
    public static extern LLVMValueRef LLVMConstGEP(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMValueRef * ConstantIndices, unsigned int NumIndices);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstInBoundsGEP")]
    public static extern LLVMValueRef LLVMConstInBoundsGEP(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMValueRef * ConstantIndices, unsigned int NumIndices);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstTrunc")]
    public static extern LLVMValueRef LLVMConstTrunc(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstSExt")]
    public static extern LLVMValueRef LLVMConstSExt(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstZExt")]
    public static extern LLVMValueRef LLVMConstZExt(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFPTrunc")]
    public static extern LLVMValueRef LLVMConstFPTrunc(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFPExt")]
    public static extern LLVMValueRef LLVMConstFPExt(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstUIToFP")]
    public static extern LLVMValueRef LLVMConstUIToFP(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstSIToFP")]
    public static extern LLVMValueRef LLVMConstSIToFP(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFPToUI")]
    public static extern LLVMValueRef LLVMConstFPToUI(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFPToSI")]
    public static extern LLVMValueRef LLVMConstFPToSI(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstPtrToInt")]
    public static extern LLVMValueRef LLVMConstPtrToInt(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstIntToPtr")]
    public static extern LLVMValueRef LLVMConstIntToPtr(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstBitCast")]
    public static extern LLVMValueRef LLVMConstBitCast(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstAddrSpaceCast")]
    public static extern LLVMValueRef LLVMConstAddrSpaceCast(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstZExtOrBitCast")]
    public static extern LLVMValueRef LLVMConstZExtOrBitCast(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstSExtOrBitCast")]
    public static extern LLVMValueRef LLVMConstSExtOrBitCast(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstTruncOrBitCast")]
    public static extern LLVMValueRef LLVMConstTruncOrBitCast(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstPointerCast")]
    public static extern LLVMValueRef LLVMConstPointerCast(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstIntCast")]
    public static extern LLVMValueRef LLVMConstIntCast(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType, LLVMBool:int isSigned);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstFPCast")]
    public static extern LLVMValueRef LLVMConstFPCast(
LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, LLVMTypeRef:struct LLVMOpaqueType * ToType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstSelect")]
    public static extern LLVMValueRef LLVMConstSelect(
LLVMValueRef:struct LLVMOpaqueValue * ConstantCondition, LLVMValueRef:struct LLVMOpaqueValue * ConstantIfTrue, LLVMValueRef:struct LLVMOpaqueValue * ConstantIfFalse);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstExtractElement")]
    public static extern LLVMValueRef LLVMConstExtractElement(
LLVMValueRef:struct LLVMOpaqueValue * VectorConstant, LLVMValueRef:struct LLVMOpaqueValue * IndexConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstInsertElement")]
    public static extern LLVMValueRef LLVMConstInsertElement(
LLVMValueRef:struct LLVMOpaqueValue * VectorConstant, LLVMValueRef:struct LLVMOpaqueValue * ElementValueConstant, LLVMValueRef:struct LLVMOpaqueValue * IndexConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstShuffleVector")]
    public static extern LLVMValueRef LLVMConstShuffleVector(
LLVMValueRef:struct LLVMOpaqueValue * VectorAConstant, LLVMValueRef:struct LLVMOpaqueValue * VectorBConstant, LLVMValueRef:struct LLVMOpaqueValue * MaskConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstExtractValue")]
    public static extern LLVMValueRef LLVMConstExtractValue(
LLVMValueRef:struct LLVMOpaqueValue * AggConstant, unsigned int* IdxList, unsigned int NumIdx);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstInsertValue")]
    public static extern LLVMValueRef LLVMConstInsertValue(
LLVMValueRef:struct LLVMOpaqueValue * AggConstant, LLVMValueRef:struct LLVMOpaqueValue * ElementValueConstant, unsigned int* IdxList, unsigned int NumIdx);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBlockAddress")]
    public static extern LLVMValueRef LLVMBlockAddress(
LLVMValueRef:struct LLVMOpaqueValue * F, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMConstInlineAsm")]
    public static extern LLVMValueRef LLVMConstInlineAsm(
LLVMTypeRef:struct LLVMOpaqueType * Ty, const char* AsmString, const char* Constraints, LLVMBool:int HasSideEffects, LLVMBool:int IsAlignStack);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetGlobalParent")]
    public static extern LLVMModuleRef LLVMGetGlobalParent(
LLVMValueRef:struct LLVMOpaqueValue * Global);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsDeclaration")]
    public static extern LLVMBool LLVMIsDeclaration(
LLVMValueRef:struct LLVMOpaqueValue * Global);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetLinkage")]
    public static extern LLVMLinkage LLVMGetLinkage(
LLVMValueRef:struct LLVMOpaqueValue * Global);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetLinkage")]
    public static extern void LLVMSetLinkage(
LLVMValueRef:struct LLVMOpaqueValue * Global, LLVMLinkage:LLVMLinkage Linkage);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSection")]
    public static extern const char* LLVMGetSection(
LLVMValueRef:struct LLVMOpaqueValue * Global);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetSection")]
    public static extern void LLVMSetSection(
LLVMValueRef:struct LLVMOpaqueValue * Global, const char* Section);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetVisibility")]
    public static extern LLVMVisibility LLVMGetVisibility(
LLVMValueRef:struct LLVMOpaqueValue * Global);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetVisibility")]
    public static extern void LLVMSetVisibility(
LLVMValueRef:struct LLVMOpaqueValue * Global, LLVMVisibility:LLVMVisibility Viz);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetDLLStorageClass")]
    public static extern LLVMDLLStorageClass LLVMGetDLLStorageClass(
LLVMValueRef:struct LLVMOpaqueValue * Global);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetDLLStorageClass")]
    public static extern void LLVMSetDLLStorageClass(
LLVMValueRef:struct LLVMOpaqueValue * Global, LLVMDLLStorageClass:LLVMDLLStorageClass Class);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetUnnamedAddress")]
    public static extern LLVMUnnamedAddr LLVMGetUnnamedAddress(
LLVMValueRef:struct LLVMOpaqueValue * Global);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetUnnamedAddress")]
    public static extern void LLVMSetUnnamedAddress(
LLVMValueRef:struct LLVMOpaqueValue * Global, LLVMUnnamedAddr:LLVMUnnamedAddr UnnamedAddr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMHasUnnamedAddr")]
    public static extern LLVMBool LLVMHasUnnamedAddr(
LLVMValueRef:struct LLVMOpaqueValue * Global);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetUnnamedAddr")]
    public static extern void LLVMSetUnnamedAddr(
LLVMValueRef:struct LLVMOpaqueValue * Global, LLVMBool:int HasUnnamedAddr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetAlignment")]
    public static extern unsigned int LLVMGetAlignment(
    LLVMValueRef:struct LLVMOpaqueValue * V);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetAlignment")]
    public static extern void LLVMSetAlignment(
LLVMValueRef:struct LLVMOpaqueValue * V, unsigned int Bytes);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddGlobal")]
    public static extern LLVMValueRef LLVMAddGlobal(
LLVMModuleRef:struct LLVMOpaqueModule * M, LLVMTypeRef:struct LLVMOpaqueType * Ty, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddGlobalInAddressSpace")]
    public static extern LLVMValueRef LLVMAddGlobalInAddressSpace(
LLVMModuleRef:struct LLVMOpaqueModule * M, LLVMTypeRef:struct LLVMOpaqueType * Ty, const char* Name, unsigned int AddressSpace);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNamedGlobal")]
    public static extern LLVMValueRef LLVMGetNamedGlobal(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetFirstGlobal")]
    public static extern LLVMValueRef LLVMGetFirstGlobal(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetLastGlobal")]
    public static extern LLVMValueRef LLVMGetLastGlobal(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNextGlobal")]
    public static extern LLVMValueRef LLVMGetNextGlobal(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetPreviousGlobal")]
    public static extern LLVMValueRef LLVMGetPreviousGlobal(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDeleteGlobal")]
    public static extern void LLVMDeleteGlobal(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetInitializer")]
    public static extern LLVMValueRef LLVMGetInitializer(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetInitializer")]
    public static extern void LLVMSetInitializer(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar, LLVMValueRef:struct LLVMOpaqueValue * ConstantVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsThreadLocal")]
    public static extern LLVMBool LLVMIsThreadLocal(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetThreadLocal")]
    public static extern void LLVMSetThreadLocal(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar, LLVMBool:int IsThreadLocal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsGlobalConstant")]
    public static extern LLVMBool LLVMIsGlobalConstant(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetGlobalConstant")]
    public static extern void LLVMSetGlobalConstant(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar, LLVMBool:int IsConstant);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetThreadLocalMode")]
    public static extern LLVMThreadLocalMode LLVMGetThreadLocalMode(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetThreadLocalMode")]
    public static extern void LLVMSetThreadLocalMode(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar, LLVMThreadLocalMode:LLVMThreadLocalMode Mode);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsExternallyInitialized")]
    public static extern LLVMBool LLVMIsExternallyInitialized(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetExternallyInitialized")]
    public static extern void LLVMSetExternallyInitialized(
LLVMValueRef:struct LLVMOpaqueValue * GlobalVar, LLVMBool:int IsExtInit);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddAlias")]
    public static extern LLVMValueRef LLVMAddAlias(
LLVMModuleRef:struct LLVMOpaqueModule * M, LLVMTypeRef:struct LLVMOpaqueType * Ty, LLVMValueRef:struct LLVMOpaqueValue * Aliasee, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNamedGlobalAlias")]
    public static extern LLVMValueRef LLVMGetNamedGlobalAlias(
LLVMModuleRef:struct LLVMOpaqueModule * M, const char* Name, size_t:unsigned long long NameLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetFirstGlobalAlias")]
    public static extern LLVMValueRef LLVMGetFirstGlobalAlias(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetLastGlobalAlias")]
    public static extern LLVMValueRef LLVMGetLastGlobalAlias(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNextGlobalAlias")]
    public static extern LLVMValueRef LLVMGetNextGlobalAlias(
LLVMValueRef:struct LLVMOpaqueValue * GA);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetPreviousGlobalAlias")]
    public static extern LLVMValueRef LLVMGetPreviousGlobalAlias(
LLVMValueRef:struct LLVMOpaqueValue * GA);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAliasGetAliasee")]
    public static extern LLVMValueRef LLVMAliasGetAliasee(
LLVMValueRef:struct LLVMOpaqueValue * Alias);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAliasSetAliasee")]
    public static extern void LLVMAliasSetAliasee(
LLVMValueRef:struct LLVMOpaqueValue * Alias, LLVMValueRef:struct LLVMOpaqueValue * Aliasee);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDeleteFunction")]
    public static extern void LLVMDeleteFunction(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMHasPersonalityFn")]
    public static extern LLVMBool LLVMHasPersonalityFn(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetPersonalityFn")]
    public static extern LLVMValueRef LLVMGetPersonalityFn(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetPersonalityFn")]
    public static extern void LLVMSetPersonalityFn(
LLVMValueRef:struct LLVMOpaqueValue * Fn, LLVMValueRef:struct LLVMOpaqueValue * PersonalityFn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetIntrinsicID")]
    public static extern unsigned int LLVMGetIntrinsicID(
    LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetFunctionCallConv")]
    public static extern unsigned int LLVMGetFunctionCallConv(
    LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetFunctionCallConv")]
    public static extern void LLVMSetFunctionCallConv(
LLVMValueRef:struct LLVMOpaqueValue * Fn, unsigned int CC);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetGC")]
    public static extern const char* LLVMGetGC(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetGC")]
    public static extern void LLVMSetGC(
LLVMValueRef:struct LLVMOpaqueValue * Fn, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddAttributeAtIndex")]
    public static extern void LLVMAddAttributeAtIndex(
LLVMValueRef:struct LLVMOpaqueValue * F, LLVMAttributeIndex:unsigned int Idx, LLVMAttributeRef:struct LLVMOpaqueAttributeRef * A);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetAttributeCountAtIndex")]
    public static extern unsigned int LLVMGetAttributeCountAtIndex(
    LLVMValueRef:struct LLVMOpaqueValue * F, LLVMAttributeIndex:unsigned int Idx);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetAttributesAtIndex")]
    public static extern void LLVMGetAttributesAtIndex(
LLVMValueRef:struct LLVMOpaqueValue * F, LLVMAttributeIndex:unsigned int Idx, LLVMAttributeRef * Attrs);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetEnumAttributeAtIndex")]
    public static extern LLVMAttributeRef LLVMGetEnumAttributeAtIndex(
LLVMValueRef:struct LLVMOpaqueValue * F, LLVMAttributeIndex:unsigned int Idx, unsigned int KindID);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetStringAttributeAtIndex")]
    public static extern LLVMAttributeRef LLVMGetStringAttributeAtIndex(
LLVMValueRef:struct LLVMOpaqueValue * F, LLVMAttributeIndex:unsigned int Idx, const char* K, unsigned int KLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRemoveEnumAttributeAtIndex")]
    public static extern void LLVMRemoveEnumAttributeAtIndex(
LLVMValueRef:struct LLVMOpaqueValue * F, LLVMAttributeIndex:unsigned int Idx, unsigned int KindID);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRemoveStringAttributeAtIndex")]
    public static extern void LLVMRemoveStringAttributeAtIndex(
LLVMValueRef:struct LLVMOpaqueValue * F, LLVMAttributeIndex:unsigned int Idx, const char* K, unsigned int KLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddTargetDependentFunctionAttr")]
    public static extern void LLVMAddTargetDependentFunctionAttr(
LLVMValueRef:struct LLVMOpaqueValue * Fn, const char* A, const char* V);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCountParams")]
    public static extern unsigned int LLVMCountParams(
    LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetParams")]
    public static extern void LLVMGetParams(
LLVMValueRef:struct LLVMOpaqueValue * Fn, LLVMValueRef * Params);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetParam")]
    public static extern LLVMValueRef LLVMGetParam(
LLVMValueRef:struct LLVMOpaqueValue * Fn, unsigned int Index);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetParamParent")]
    public static extern LLVMValueRef LLVMGetParamParent(
LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetFirstParam")]
    public static extern LLVMValueRef LLVMGetFirstParam(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetLastParam")]
    public static extern LLVMValueRef LLVMGetLastParam(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNextParam")]
    public static extern LLVMValueRef LLVMGetNextParam(
LLVMValueRef:struct LLVMOpaqueValue * Arg);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetPreviousParam")]
    public static extern LLVMValueRef LLVMGetPreviousParam(
LLVMValueRef:struct LLVMOpaqueValue * Arg);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetParamAlignment")]
    public static extern void LLVMSetParamAlignment(
LLVMValueRef:struct LLVMOpaqueValue * Arg, unsigned int Align);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMDStringInContext")]
    public static extern LLVMValueRef LLVMMDStringInContext(
LLVMContextRef:struct LLVMOpaqueContext * C, const char* Str, unsigned int SLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMDString")]
    public static extern LLVMValueRef LLVMMDString(
const char* Str, unsigned int SLen);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMDNodeInContext")]
    public static extern LLVMValueRef LLVMMDNodeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C, LLVMValueRef * Vals, unsigned int Count);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMDNode")]
    public static extern LLVMValueRef LLVMMDNode(
LLVMValueRef* Vals, unsigned int Count);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMetadataAsValue")]
    public static extern LLVMValueRef LLVMMetadataAsValue(
LLVMContextRef:struct LLVMOpaqueContext * C, LLVMMetadataRef:struct LLVMOpaqueMetadata * MD);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMValueAsMetadata")]
    public static extern LLVMMetadataRef LLVMValueAsMetadata(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetMDString")]
    public static extern const char* LLVMGetMDString(
LLVMValueRef:struct LLVMOpaqueValue * V, unsigned int* Length);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetMDNodeNumOperands")]
    public static extern unsigned int LLVMGetMDNodeNumOperands(
    LLVMValueRef:struct LLVMOpaqueValue * V);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetMDNodeOperands")]
    public static extern void LLVMGetMDNodeOperands(
LLVMValueRef:struct LLVMOpaqueValue * V, LLVMValueRef * Dest);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBasicBlockAsValue")]
    public static extern LLVMValueRef LLVMBasicBlockAsValue(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMValueIsBasicBlock")]
    public static extern LLVMBool LLVMValueIsBasicBlock(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMValueAsBasicBlock")]
    public static extern LLVMBasicBlockRef LLVMValueAsBasicBlock(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetBasicBlockName")]
    public static extern const char* LLVMGetBasicBlockName(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetBasicBlockParent")]
    public static extern LLVMValueRef LLVMGetBasicBlockParent(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetBasicBlockTerminator")]
    public static extern LLVMValueRef LLVMGetBasicBlockTerminator(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCountBasicBlocks")]
    public static extern unsigned int LLVMCountBasicBlocks(
    LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetBasicBlocks")]
    public static extern void LLVMGetBasicBlocks(
LLVMValueRef:struct LLVMOpaqueValue * Fn, LLVMBasicBlockRef * BasicBlocks);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetFirstBasicBlock")]
    public static extern LLVMBasicBlockRef LLVMGetFirstBasicBlock(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetLastBasicBlock")]
    public static extern LLVMBasicBlockRef LLVMGetLastBasicBlock(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNextBasicBlock")]
    public static extern LLVMBasicBlockRef LLVMGetNextBasicBlock(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetPreviousBasicBlock")]
    public static extern LLVMBasicBlockRef LLVMGetPreviousBasicBlock(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetEntryBasicBlock")]
    public static extern LLVMBasicBlockRef LLVMGetEntryBasicBlock(
LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAppendBasicBlockInContext")]
    public static extern LLVMBasicBlockRef LLVMAppendBasicBlockInContext(
LLVMContextRef:struct LLVMOpaqueContext * C, LLVMValueRef:struct LLVMOpaqueValue * Fn, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAppendBasicBlock")]
    public static extern LLVMBasicBlockRef LLVMAppendBasicBlock(
LLVMValueRef:struct LLVMOpaqueValue * Fn, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInsertBasicBlockInContext")]
    public static extern LLVMBasicBlockRef LLVMInsertBasicBlockInContext(
LLVMContextRef:struct LLVMOpaqueContext * C, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInsertBasicBlock")]
    public static extern LLVMBasicBlockRef LLVMInsertBasicBlock(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * InsertBeforeBB, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDeleteBasicBlock")]
    public static extern void LLVMDeleteBasicBlock(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRemoveBasicBlockFromParent")]
    public static extern void LLVMRemoveBasicBlockFromParent(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMoveBasicBlockBefore")]
    public static extern void LLVMMoveBasicBlockBefore(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * MovePos);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMoveBasicBlockAfter")]
    public static extern void LLVMMoveBasicBlockAfter(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * MovePos);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetFirstInstruction")]
    public static extern LLVMValueRef LLVMGetFirstInstruction(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetLastInstruction")]
    public static extern LLVMValueRef LLVMGetLastInstruction(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMHasMetadata")]
    public static extern int LLVMHasMetadata(
LLVMValueRef:struct LLVMOpaqueValue * Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetMetadata")]
    public static extern LLVMValueRef LLVMGetMetadata(
LLVMValueRef:struct LLVMOpaqueValue * Val, unsigned int KindID);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetMetadata")]
    public static extern void LLVMSetMetadata(
LLVMValueRef:struct LLVMOpaqueValue * Val, unsigned int KindID, LLVMValueRef:struct LLVMOpaqueValue * Node);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetInstructionParent")]
    public static extern LLVMBasicBlockRef LLVMGetInstructionParent(
LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNextInstruction")]
    public static extern LLVMValueRef LLVMGetNextInstruction(
LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetPreviousInstruction")]
    public static extern LLVMValueRef LLVMGetPreviousInstruction(
LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInstructionRemoveFromParent")]
    public static extern void LLVMInstructionRemoveFromParent(
LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInstructionEraseFromParent")]
    public static extern void LLVMInstructionEraseFromParent(
LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetInstructionOpcode")]
    public static extern LLVMOpcode LLVMGetInstructionOpcode(
LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetICmpPredicate")]
    public static extern LLVMIntPredicate LLVMGetICmpPredicate(
LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetFCmpPredicate")]
    public static extern LLVMRealPredicate LLVMGetFCmpPredicate(
LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInstructionClone")]
    public static extern LLVMValueRef LLVMInstructionClone(
LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNumArgOperands")]
    public static extern unsigned int LLVMGetNumArgOperands(
    LLVMValueRef:struct LLVMOpaqueValue * Instr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetInstructionCallConv")]
    public static extern void LLVMSetInstructionCallConv(
LLVMValueRef:struct LLVMOpaqueValue * Instr, unsigned int CC);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetInstructionCallConv")]
    public static extern unsigned int LLVMGetInstructionCallConv(
    LLVMValueRef:struct LLVMOpaqueValue * Instr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetInstrParamAlignment")]
    public static extern void LLVMSetInstrParamAlignment(
LLVMValueRef:struct LLVMOpaqueValue * Instr, unsigned int index, unsigned int Align);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddCallSiteAttribute")]
    public static extern void LLVMAddCallSiteAttribute(
LLVMValueRef:struct LLVMOpaqueValue * C, LLVMAttributeIndex:unsigned int Idx, LLVMAttributeRef:struct LLVMOpaqueAttributeRef * A);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetCallSiteAttributeCount")]
    public static extern unsigned int LLVMGetCallSiteAttributeCount(
    LLVMValueRef:struct LLVMOpaqueValue * C, LLVMAttributeIndex:unsigned int Idx);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetCallSiteAttributes")]
    public static extern void LLVMGetCallSiteAttributes(
LLVMValueRef:struct LLVMOpaqueValue * C, LLVMAttributeIndex:unsigned int Idx, LLVMAttributeRef * Attrs);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetCallSiteEnumAttribute")]
    public static extern LLVMAttributeRef LLVMGetCallSiteEnumAttribute(
LLVMValueRef:struct LLVMOpaqueValue * C, LLVMAttributeIndex:unsigned int Idx, unsigned int KindID);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetCallSiteStringAttribute")]
    public static extern LLVMAttributeRef LLVMGetCallSiteStringAttribute(
LLVMValueRef:struct LLVMOpaqueValue * C, LLVMAttributeIndex:unsigned int Idx, const char* K, unsigned int KLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRemoveCallSiteEnumAttribute")]
    public static extern void LLVMRemoveCallSiteEnumAttribute(
LLVMValueRef:struct LLVMOpaqueValue * C, LLVMAttributeIndex:unsigned int Idx, unsigned int KindID);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRemoveCallSiteStringAttribute")]
    public static extern void LLVMRemoveCallSiteStringAttribute(
LLVMValueRef:struct LLVMOpaqueValue * C, LLVMAttributeIndex:unsigned int Idx, const char* K, unsigned int KLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetCalledValue")]
    public static extern LLVMValueRef LLVMGetCalledValue(
LLVMValueRef:struct LLVMOpaqueValue * Instr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsTailCall")]
    public static extern LLVMBool LLVMIsTailCall(
LLVMValueRef:struct LLVMOpaqueValue * CallInst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetTailCall")]
    public static extern void LLVMSetTailCall(
LLVMValueRef:struct LLVMOpaqueValue * CallInst, LLVMBool:int IsTailCall);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNormalDest")]
    public static extern LLVMBasicBlockRef LLVMGetNormalDest(
LLVMValueRef:struct LLVMOpaqueValue * InvokeInst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetUnwindDest")]
    public static extern LLVMBasicBlockRef LLVMGetUnwindDest(
LLVMValueRef:struct LLVMOpaqueValue * InvokeInst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetNormalDest")]
    public static extern void LLVMSetNormalDest(
LLVMValueRef:struct LLVMOpaqueValue * InvokeInst, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * B);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetUnwindDest")]
    public static extern void LLVMSetUnwindDest(
LLVMValueRef:struct LLVMOpaqueValue * InvokeInst, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * B);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNumSuccessors")]
    public static extern unsigned int LLVMGetNumSuccessors(
    LLVMValueRef:struct LLVMOpaqueValue * Term);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSuccessor")]
    public static extern LLVMBasicBlockRef LLVMGetSuccessor(
LLVMValueRef:struct LLVMOpaqueValue * Term, unsigned int i);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetSuccessor")]
    public static extern void LLVMSetSuccessor(
LLVMValueRef:struct LLVMOpaqueValue * Term, unsigned int i, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * block);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsConditional")]
    public static extern LLVMBool LLVMIsConditional(
LLVMValueRef:struct LLVMOpaqueValue * Branch);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetCondition")]
    public static extern LLVMValueRef LLVMGetCondition(
LLVMValueRef:struct LLVMOpaqueValue * Branch);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetCondition")]
    public static extern void LLVMSetCondition(
LLVMValueRef:struct LLVMOpaqueValue * Branch, LLVMValueRef:struct LLVMOpaqueValue * Cond);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSwitchDefaultDest")]
    public static extern LLVMBasicBlockRef LLVMGetSwitchDefaultDest(
LLVMValueRef:struct LLVMOpaqueValue * SwitchInstr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetAllocatedType")]
    public static extern LLVMTypeRef LLVMGetAllocatedType(
LLVMValueRef:struct LLVMOpaqueValue * Alloca);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsInBounds")]
    public static extern LLVMBool LLVMIsInBounds(
LLVMValueRef:struct LLVMOpaqueValue * GEP);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetIsInBounds")]
    public static extern void LLVMSetIsInBounds(
LLVMValueRef:struct LLVMOpaqueValue * GEP, LLVMBool:int InBounds);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddIncoming")]
    public static extern void LLVMAddIncoming(
LLVMValueRef:struct LLVMOpaqueValue * PhiNode, LLVMValueRef * IncomingValues, LLVMBasicBlockRef * IncomingBlocks, unsigned int Count);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCountIncoming")]
    public static extern unsigned int LLVMCountIncoming(
    LLVMValueRef:struct LLVMOpaqueValue * PhiNode);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetIncomingValue")]
    public static extern LLVMValueRef LLVMGetIncomingValue(
LLVMValueRef:struct LLVMOpaqueValue * PhiNode, unsigned int Index);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetIncomingBlock")]
    public static extern LLVMBasicBlockRef LLVMGetIncomingBlock(
LLVMValueRef:struct LLVMOpaqueValue * PhiNode, unsigned int Index);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNumIndices")]
    public static extern unsigned int LLVMGetNumIndices(
    LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetIndices")]
    public static extern const unsigned int* LLVMGetIndices(
    LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateBuilderInContext")]
    public static extern LLVMBuilderRef LLVMCreateBuilderInContext(
LLVMContextRef:struct LLVMOpaqueContext * C);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPositionBuilder")]
    public static extern void LLVMPositionBuilder(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Block, LLVMValueRef:struct LLVMOpaqueValue * Instr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPositionBuilderBefore")]
    public static extern void LLVMPositionBuilderBefore(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder, LLVMValueRef:struct LLVMOpaqueValue * Instr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPositionBuilderAtEnd")]
    public static extern void LLVMPositionBuilderAtEnd(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Block);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetInsertBlock")]
    public static extern LLVMBasicBlockRef LLVMGetInsertBlock(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMClearInsertionPosition")]
    public static extern void LLVMClearInsertionPosition(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInsertIntoBuilder")]
    public static extern void LLVMInsertIntoBuilder(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder, LLVMValueRef:struct LLVMOpaqueValue * Instr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInsertIntoBuilderWithName")]
    public static extern void LLVMInsertIntoBuilderWithName(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder, LLVMValueRef:struct LLVMOpaqueValue * Instr, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeBuilder")]
    public static extern void LLVMDisposeBuilder(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetCurrentDebugLocation")]
    public static extern void LLVMSetCurrentDebugLocation(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder, LLVMValueRef:struct LLVMOpaqueValue * L);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetCurrentDebugLocation")]
    public static extern LLVMValueRef LLVMGetCurrentDebugLocation(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetInstDebugLocation")]
    public static extern void LLVMSetInstDebugLocation(
LLVMBuilderRef:struct LLVMOpaqueBuilder * Builder, LLVMValueRef:struct LLVMOpaqueValue * Inst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildRet")]
    public static extern LLVMValueRef LLVMBuildRet(
LLVMValueRef:struct LLVMOpaqueValue * V);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildAggregateRet")]
    public static extern LLVMValueRef LLVMBuildAggregateRet(
LLVMValueRef* RetVals, unsigned int N);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildBr")]
    public static extern LLVMValueRef LLVMBuildBr(
LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Dest);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildCondBr")]
    public static extern LLVMValueRef LLVMBuildCondBr(
LLVMValueRef:struct LLVMOpaqueValue * If, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Then, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Else);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildSwitch")]
    public static extern LLVMValueRef LLVMBuildSwitch(
LLVMValueRef:struct LLVMOpaqueValue * V, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Else, unsigned int NumCases);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildIndirectBr")]
    public static extern LLVMValueRef LLVMBuildIndirectBr(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * Addr, unsigned int NumDests);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildInvoke")]
    public static extern LLVMValueRef LLVMBuildInvoke(
LLVMValueRef:struct LLVMOpaqueValue * Fn, LLVMValueRef * Args, unsigned int NumArgs, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Then, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Catch, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildResume")]
    public static extern LLVMValueRef LLVMBuildResume(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * Exn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildLandingPad")]
    public static extern LLVMValueRef LLVMBuildLandingPad(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMTypeRef:struct LLVMOpaqueType * Ty, LLVMValueRef:struct LLVMOpaqueValue * PersFn, unsigned int NumClauses, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildCleanupRet")]
    public static extern LLVMValueRef LLVMBuildCleanupRet(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * CatchPad, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildCatchRet")]
    public static extern LLVMValueRef LLVMBuildCatchRet(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * CatchPad, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * BB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildCatchPad")]
    public static extern LLVMValueRef LLVMBuildCatchPad(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * ParentPad, LLVMValueRef * Args, unsigned int NumArgs, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildCleanupPad")]
    public static extern LLVMValueRef LLVMBuildCleanupPad(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * ParentPad, LLVMValueRef * Args, unsigned int NumArgs, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildCatchSwitch")]
    public static extern LLVMValueRef LLVMBuildCatchSwitch(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * ParentPad, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * UnwindBB, unsigned int NumHandlers, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddCase")]
    public static extern void LLVMAddCase(
LLVMValueRef:struct LLVMOpaqueValue * Switch, LLVMValueRef:struct LLVMOpaqueValue * OnVal, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Dest);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddDestination")]
    public static extern void LLVMAddDestination(
LLVMValueRef:struct LLVMOpaqueValue * IndirectBr, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Dest);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNumClauses")]
    public static extern unsigned int LLVMGetNumClauses(
    LLVMValueRef:struct LLVMOpaqueValue * LandingPad);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetClause")]
    public static extern LLVMValueRef LLVMGetClause(
LLVMValueRef:struct LLVMOpaqueValue * LandingPad, unsigned int Idx);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddClause")]
    public static extern void LLVMAddClause(
LLVMValueRef:struct LLVMOpaqueValue * LandingPad, LLVMValueRef:struct LLVMOpaqueValue * ClauseVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsCleanup")]
    public static extern LLVMBool LLVMIsCleanup(
LLVMValueRef:struct LLVMOpaqueValue * LandingPad);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetCleanup")]
    public static extern void LLVMSetCleanup(
LLVMValueRef:struct LLVMOpaqueValue * LandingPad, LLVMBool:int Val);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddHandler")]
    public static extern void LLVMAddHandler(
LLVMValueRef:struct LLVMOpaqueValue * CatchSwitch, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Dest);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNumHandlers")]
    public static extern unsigned int LLVMGetNumHandlers(
    LLVMValueRef:struct LLVMOpaqueValue * CatchSwitch);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetHandlers")]
    public static extern void LLVMGetHandlers(
LLVMValueRef:struct LLVMOpaqueValue * CatchSwitch, LLVMBasicBlockRef * Handlers);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetArgOperand")]
    public static extern LLVMValueRef LLVMGetArgOperand(
LLVMValueRef:struct LLVMOpaqueValue * Funclet, unsigned int i);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetArgOperand")]
    public static extern void LLVMSetArgOperand(
LLVMValueRef:struct LLVMOpaqueValue * Funclet, unsigned int i, LLVMValueRef:struct LLVMOpaqueValue * value);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetParentCatchSwitch")]
    public static extern LLVMValueRef LLVMGetParentCatchSwitch(
LLVMValueRef:struct LLVMOpaqueValue * CatchPad);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetParentCatchSwitch")]
    public static extern void LLVMSetParentCatchSwitch(
LLVMValueRef:struct LLVMOpaqueValue * CatchPad, LLVMValueRef:struct LLVMOpaqueValue * CatchSwitch);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildAdd")]
    public static extern LLVMValueRef LLVMBuildAdd(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildNSWAdd")]
    public static extern LLVMValueRef LLVMBuildNSWAdd(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildNUWAdd")]
    public static extern LLVMValueRef LLVMBuildNUWAdd(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFAdd")]
    public static extern LLVMValueRef LLVMBuildFAdd(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildSub")]
    public static extern LLVMValueRef LLVMBuildSub(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildNSWSub")]
    public static extern LLVMValueRef LLVMBuildNSWSub(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildNUWSub")]
    public static extern LLVMValueRef LLVMBuildNUWSub(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFSub")]
    public static extern LLVMValueRef LLVMBuildFSub(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildMul")]
    public static extern LLVMValueRef LLVMBuildMul(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildNSWMul")]
    public static extern LLVMValueRef LLVMBuildNSWMul(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildNUWMul")]
    public static extern LLVMValueRef LLVMBuildNUWMul(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFMul")]
    public static extern LLVMValueRef LLVMBuildFMul(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildUDiv")]
    public static extern LLVMValueRef LLVMBuildUDiv(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildExactUDiv")]
    public static extern LLVMValueRef LLVMBuildExactUDiv(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildSDiv")]
    public static extern LLVMValueRef LLVMBuildSDiv(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildExactSDiv")]
    public static extern LLVMValueRef LLVMBuildExactSDiv(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFDiv")]
    public static extern LLVMValueRef LLVMBuildFDiv(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildURem")]
    public static extern LLVMValueRef LLVMBuildURem(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildSRem")]
    public static extern LLVMValueRef LLVMBuildSRem(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFRem")]
    public static extern LLVMValueRef LLVMBuildFRem(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildShl")]
    public static extern LLVMValueRef LLVMBuildShl(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildLShr")]
    public static extern LLVMValueRef LLVMBuildLShr(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildAShr")]
    public static extern LLVMValueRef LLVMBuildAShr(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildAnd")]
    public static extern LLVMValueRef LLVMBuildAnd(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildOr")]
    public static extern LLVMValueRef LLVMBuildOr(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildXor")]
    public static extern LLVMValueRef LLVMBuildXor(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildBinOp")]
    public static extern LLVMValueRef LLVMBuildBinOp(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMOpcode:LLVMOpcode Op, LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildNeg")]
    public static extern LLVMValueRef LLVMBuildNeg(
LLVMValueRef:struct LLVMOpaqueValue * V, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildNSWNeg")]
    public static extern LLVMValueRef LLVMBuildNSWNeg(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * V, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildNUWNeg")]
    public static extern LLVMValueRef LLVMBuildNUWNeg(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * V, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFNeg")]
    public static extern LLVMValueRef LLVMBuildFNeg(
LLVMValueRef:struct LLVMOpaqueValue * V, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildNot")]
    public static extern LLVMValueRef LLVMBuildNot(
LLVMValueRef:struct LLVMOpaqueValue * V, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildMalloc")]
    public static extern LLVMValueRef LLVMBuildMalloc(
LLVMTypeRef:struct LLVMOpaqueType * Ty, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildArrayMalloc")]
    public static extern LLVMValueRef LLVMBuildArrayMalloc(
LLVMTypeRef:struct LLVMOpaqueType * Ty, LLVMValueRef:struct LLVMOpaqueValue * Val, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildAlloca")]
    public static extern LLVMValueRef LLVMBuildAlloca(
LLVMTypeRef:struct LLVMOpaqueType * Ty, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildArrayAlloca")]
    public static extern LLVMValueRef LLVMBuildArrayAlloca(
LLVMTypeRef:struct LLVMOpaqueType * Ty, LLVMValueRef:struct LLVMOpaqueValue * Val, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFree")]
    public static extern LLVMValueRef LLVMBuildFree(
LLVMValueRef:struct LLVMOpaqueValue * PointerVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildLoad")]
    public static extern LLVMValueRef LLVMBuildLoad(
LLVMValueRef:struct LLVMOpaqueValue * PointerVal, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildStore")]
    public static extern LLVMValueRef LLVMBuildStore(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMValueRef:struct LLVMOpaqueValue * Ptr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildGEP")]
    public static extern LLVMValueRef LLVMBuildGEP(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * Pointer, LLVMValueRef * Indices, unsigned int NumIndices, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildInBoundsGEP")]
    public static extern LLVMValueRef LLVMBuildInBoundsGEP(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * Pointer, LLVMValueRef * Indices, unsigned int NumIndices, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildStructGEP")]
    public static extern LLVMValueRef LLVMBuildStructGEP(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * Pointer, unsigned int Idx, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildGlobalString")]
    public static extern LLVMValueRef LLVMBuildGlobalString(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, const char* Str, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildGlobalStringPtr")]
    public static extern LLVMValueRef LLVMBuildGlobalStringPtr(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, const char* Str, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetVolatile")]
    public static extern LLVMBool LLVMGetVolatile(
LLVMValueRef:struct LLVMOpaqueValue * MemoryAccessInst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetVolatile")]
    public static extern void LLVMSetVolatile(
LLVMValueRef:struct LLVMOpaqueValue * MemoryAccessInst, LLVMBool:int IsVolatile);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetOrdering")]
    public static extern LLVMAtomicOrdering LLVMGetOrdering(
LLVMValueRef:struct LLVMOpaqueValue * MemoryAccessInst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetOrdering")]
    public static extern void LLVMSetOrdering(
LLVMValueRef:struct LLVMOpaqueValue * MemoryAccessInst, LLVMAtomicOrdering:LLVMAtomicOrdering Ordering);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildTrunc")]
    public static extern LLVMValueRef LLVMBuildTrunc(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildZExt")]
    public static extern LLVMValueRef LLVMBuildZExt(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildSExt")]
    public static extern LLVMValueRef LLVMBuildSExt(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFPToUI")]
    public static extern LLVMValueRef LLVMBuildFPToUI(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFPToSI")]
    public static extern LLVMValueRef LLVMBuildFPToSI(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildUIToFP")]
    public static extern LLVMValueRef LLVMBuildUIToFP(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildSIToFP")]
    public static extern LLVMValueRef LLVMBuildSIToFP(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFPTrunc")]
    public static extern LLVMValueRef LLVMBuildFPTrunc(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFPExt")]
    public static extern LLVMValueRef LLVMBuildFPExt(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildPtrToInt")]
    public static extern LLVMValueRef LLVMBuildPtrToInt(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildIntToPtr")]
    public static extern LLVMValueRef LLVMBuildIntToPtr(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildBitCast")]
    public static extern LLVMValueRef LLVMBuildBitCast(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildAddrSpaceCast")]
    public static extern LLVMValueRef LLVMBuildAddrSpaceCast(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildZExtOrBitCast")]
    public static extern LLVMValueRef LLVMBuildZExtOrBitCast(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildSExtOrBitCast")]
    public static extern LLVMValueRef LLVMBuildSExtOrBitCast(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildTruncOrBitCast")]
    public static extern LLVMValueRef LLVMBuildTruncOrBitCast(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildCast")]
    public static extern LLVMValueRef LLVMBuildCast(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMOpcode:LLVMOpcode Op, LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildPointerCast")]
    public static extern LLVMValueRef LLVMBuildPointerCast(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildIntCast")]
    public static extern LLVMValueRef LLVMBuildIntCast(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFPCast")]
    public static extern LLVMValueRef LLVMBuildFPCast(
LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMTypeRef:struct LLVMOpaqueType * DestTy, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildICmp")]
    public static extern LLVMValueRef LLVMBuildICmp(
LLVMIntPredicate:LLVMIntPredicate Op, LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFCmp")]
    public static extern LLVMValueRef LLVMBuildFCmp(
LLVMRealPredicate:LLVMRealPredicate Op, LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildPhi")]
    public static extern LLVMValueRef LLVMBuildPhi(
LLVMTypeRef:struct LLVMOpaqueType * Ty, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildCall")]
    public static extern LLVMValueRef LLVMBuildCall(
LLVMValueRef:struct LLVMOpaqueValue * Fn, LLVMValueRef * Args, unsigned int NumArgs, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildSelect")]
    public static extern LLVMValueRef LLVMBuildSelect(
LLVMValueRef:struct LLVMOpaqueValue * If, LLVMValueRef:struct LLVMOpaqueValue * Then, LLVMValueRef:struct LLVMOpaqueValue * Else, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildVAArg")]
    public static extern LLVMValueRef LLVMBuildVAArg(
LLVMValueRef:struct LLVMOpaqueValue * List, LLVMTypeRef:struct LLVMOpaqueType * Ty, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildExtractElement")]
    public static extern LLVMValueRef LLVMBuildExtractElement(
LLVMValueRef:struct LLVMOpaqueValue * VecVal, LLVMValueRef:struct LLVMOpaqueValue * Index, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildInsertElement")]
    public static extern LLVMValueRef LLVMBuildInsertElement(
LLVMValueRef:struct LLVMOpaqueValue * VecVal, LLVMValueRef:struct LLVMOpaqueValue * EltVal, LLVMValueRef:struct LLVMOpaqueValue * Index, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildShuffleVector")]
    public static extern LLVMValueRef LLVMBuildShuffleVector(
LLVMValueRef:struct LLVMOpaqueValue * V1, LLVMValueRef:struct LLVMOpaqueValue * V2, LLVMValueRef:struct LLVMOpaqueValue * Mask, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildExtractValue")]
    public static extern LLVMValueRef LLVMBuildExtractValue(
LLVMValueRef:struct LLVMOpaqueValue * AggVal, unsigned int Index, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildInsertValue")]
    public static extern LLVMValueRef LLVMBuildInsertValue(
LLVMValueRef:struct LLVMOpaqueValue * AggVal, LLVMValueRef:struct LLVMOpaqueValue * EltVal, unsigned int Index, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildIsNull")]
    public static extern LLVMValueRef LLVMBuildIsNull(
LLVMValueRef:struct LLVMOpaqueValue * Val, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildIsNotNull")]
    public static extern LLVMValueRef LLVMBuildIsNotNull(
LLVMValueRef:struct LLVMOpaqueValue * Val, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildPtrDiff")]
    public static extern LLVMValueRef LLVMBuildPtrDiff(
LLVMValueRef:struct LLVMOpaqueValue * LHS, LLVMValueRef:struct LLVMOpaqueValue * RHS, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildFence")]
    public static extern LLVMValueRef LLVMBuildFence(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMAtomicOrdering:LLVMAtomicOrdering ordering, LLVMBool:int singleThread, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildAtomicRMW")]
    public static extern LLVMValueRef LLVMBuildAtomicRMW(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMAtomicRMWBinOp:LLVMAtomicRMWBinOp op, LLVMValueRef:struct LLVMOpaqueValue * PTR, LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMAtomicOrdering:LLVMAtomicOrdering ordering, LLVMBool:int singleThread);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMBuildAtomicCmpXchg")]
    public static extern LLVMValueRef LLVMBuildAtomicCmpXchg(
LLVMBuilderRef:struct LLVMOpaqueBuilder * B, LLVMValueRef:struct LLVMOpaqueValue * Ptr, LLVMValueRef:struct LLVMOpaqueValue * Cmp, LLVMValueRef:struct LLVMOpaqueValue * New, LLVMAtomicOrdering:LLVMAtomicOrdering SuccessOrdering, LLVMAtomicOrdering:LLVMAtomicOrdering FailureOrdering, LLVMBool:int SingleThread);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsAtomicSingleThread")]
    public static extern LLVMBool LLVMIsAtomicSingleThread(
LLVMValueRef:struct LLVMOpaqueValue * AtomicInst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetAtomicSingleThread")]
    public static extern void LLVMSetAtomicSingleThread(
LLVMValueRef:struct LLVMOpaqueValue * AtomicInst, LLVMBool:int SingleThread);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetCmpXchgSuccessOrdering")]
    public static extern LLVMAtomicOrdering LLVMGetCmpXchgSuccessOrdering(
LLVMValueRef:struct LLVMOpaqueValue * CmpXchgInst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetCmpXchgSuccessOrdering")]
    public static extern void LLVMSetCmpXchgSuccessOrdering(
LLVMValueRef:struct LLVMOpaqueValue * CmpXchgInst, LLVMAtomicOrdering:LLVMAtomicOrdering Ordering);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetCmpXchgFailureOrdering")]
    public static extern LLVMAtomicOrdering LLVMGetCmpXchgFailureOrdering(
LLVMValueRef:struct LLVMOpaqueValue * CmpXchgInst);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetCmpXchgFailureOrdering")]
    public static extern void LLVMSetCmpXchgFailureOrdering(
LLVMValueRef:struct LLVMOpaqueValue * CmpXchgInst, LLVMAtomicOrdering:LLVMAtomicOrdering Ordering);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateModuleProviderForExistingModule")]
    public static extern LLVMModuleProviderRef LLVMCreateModuleProviderForExistingModule(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeModuleProvider")]
    public static extern void LLVMDisposeModuleProvider(
LLVMModuleProviderRef:struct LLVMOpaqueModuleProvider * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateMemoryBufferWithContentsOfFile")]
    public static extern LLVMBool LLVMCreateMemoryBufferWithContentsOfFile(
const char* Path, LLVMMemoryBufferRef* OutMemBuf, char** OutMessage);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateMemoryBufferWithSTDIN")]
    public static extern LLVMBool LLVMCreateMemoryBufferWithSTDIN(
LLVMMemoryBufferRef* OutMemBuf, char** OutMessage);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateMemoryBufferWithMemoryRange")]
    public static extern LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange(
const char* InputData, size_t:unsigned long long InputDataLength, const char* BufferName, LLVMBool:int RequiresNullTerminator);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateMemoryBufferWithMemoryRangeCopy")]
    public static extern LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy(
const char* InputData, size_t:unsigned long long InputDataLength, const char* BufferName);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetBufferStart")]
    public static extern const char* LLVMGetBufferStart(
LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetBufferSize")]
    public static extern size_t LLVMGetBufferSize(
LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeMemoryBuffer")]
    public static extern void LLVMDisposeMemoryBuffer(
LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateFunctionPassManagerForModule")]
    public static extern LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateFunctionPassManager")]
    public static extern LLVMPassManagerRef LLVMCreateFunctionPassManager(
LLVMModuleProviderRef:struct LLVMOpaqueModuleProvider * MP);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRunPassManager")]
    public static extern LLVMBool LLVMRunPassManager(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM, LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeFunctionPassManager")]
    public static extern LLVMBool LLVMInitializeFunctionPassManager(
LLVMPassManagerRef:struct LLVMOpaquePassManager * FPM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRunFunctionPassManager")]
    public static extern LLVMBool LLVMRunFunctionPassManager(
LLVMPassManagerRef:struct LLVMOpaquePassManager * FPM, LLVMValueRef:struct LLVMOpaqueValue * F);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMFinalizeFunctionPassManager")]
    public static extern LLVMBool LLVMFinalizeFunctionPassManager(
LLVMPassManagerRef:struct LLVMOpaquePassManager * FPM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposePassManager")]
    public static extern void LLVMDisposePassManager(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetModuleDebugMetadataVersion")]
    public static extern unsigned int LLVMGetModuleDebugMetadataVersion(
    LLVMModuleRef:struct LLVMOpaqueModule * Module);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMStripModuleDebugInfo")]
    public static extern LLVMBool LLVMStripModuleDebugInfo(
LLVMModuleRef:struct LLVMOpaqueModule * Module);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateDIBuilderDisallowUnresolved")]
    public static extern LLVMDIBuilderRef LLVMCreateDIBuilderDisallowUnresolved(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateDIBuilder")]
    public static extern LLVMDIBuilderRef LLVMCreateDIBuilder(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeDIBuilder")]
    public static extern void LLVMDisposeDIBuilder(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderFinalize")]
    public static extern void LLVMDIBuilderFinalize(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateCompileUnit")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateCompileUnit(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMDWARFSourceLanguage:LLVMDWARFSourceLanguage Lang, LLVMMetadataRef:struct LLVMOpaqueMetadata * FileRef, const char* Producer, size_t:unsigned long long ProducerLen, LLVMBool:int isOptimized, const char* Flags, size_t:unsigned long long FlagsLen, unsigned int RuntimeVer, const char* SplitName, size_t:unsigned long long SplitNameLen, LLVMDWARFEmissionKind:LLVMDWARFEmissionKind Kind, unsigned int DWOId, LLVMBool:int SplitDebugInlining, LLVMBool:int DebugInfoForProfiling);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateFile")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateFile(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, const char* Filename, size_t:unsigned long long FilenameLen, const char* Directory, size_t:unsigned long long DirectoryLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateModule")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateModule(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * ParentScope, const char* Name, size_t:unsigned long long NameLen, const char* ConfigMacros, size_t:unsigned long long ConfigMacrosLen, const char* IncludePath, size_t:unsigned long long IncludePathLen, const char* ISysRoot, size_t:unsigned long long ISysRootLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateNameSpace")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateNameSpace(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * ParentScope, const char* Name, size_t:unsigned long long NameLen, LLVMBool:int ExportSymbols);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateFunction")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateFunction(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, const char* LinkageName, size_t:unsigned long long LinkageNameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNo, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty, LLVMBool:int IsLocalToUnit, LLVMBool:int IsDefinition, unsigned int ScopeLine, LLVMDIFlags:LLVMDIFlags Flags, LLVMBool:int IsOptimized);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateLexicalBlock")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateLexicalBlock(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int Line, unsigned int Column);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateLexicalBlockFile")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateLexicalBlockFile(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int Discriminator);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateImportedModuleFromNamespace")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromNamespace(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, LLVMMetadataRef:struct LLVMOpaqueMetadata * NS, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int Line);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateImportedModuleFromAlias")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromAlias(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, LLVMMetadataRef:struct LLVMOpaqueMetadata * ImportedEntity, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int Line);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateImportedModuleFromModule")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromModule(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, LLVMMetadataRef:struct LLVMOpaqueMetadata * M, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int Line);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateImportedDeclaration")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateImportedDeclaration(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, LLVMMetadataRef:struct LLVMOpaqueMetadata * Decl, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int Line, const char* Name, size_t:unsigned long long NameLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateDebugLocation")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateDebugLocation(
LLVMContextRef:struct LLVMOpaqueContext * Ctx, unsigned int Line, unsigned int Column, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, LLVMMetadataRef:struct LLVMOpaqueMetadata * InlinedAt);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDILocationGetLine")]
    public static extern unsigned int LLVMDILocationGetLine(
    LLVMMetadataRef:struct LLVMOpaqueMetadata * Location);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDILocationGetColumn")]
    public static extern unsigned int LLVMDILocationGetColumn(
    LLVMMetadataRef:struct LLVMOpaqueMetadata * Location);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDILocationGetScope")]
    public static extern LLVMMetadataRef LLVMDILocationGetScope(
LLVMMetadataRef:struct LLVMOpaqueMetadata * Location);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderGetOrCreateTypeArray")]
    public static extern LLVMMetadataRef LLVMDIBuilderGetOrCreateTypeArray(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef * Data, size_t:unsigned long long NumElements);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateSubroutineType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateSubroutineType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, LLVMMetadataRef * ParameterTypes, unsigned int NumParameterTypes, LLVMDIFlags:LLVMDIFlags Flags);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateEnumerationType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateEnumerationType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNumber, uint64_t:unsigned long long SizeInBits, uint32_t:unsigned int AlignInBits, LLVMMetadataRef * Elements, unsigned int NumElements, LLVMMetadataRef:struct LLVMOpaqueMetadata * ClassTy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateUnionType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateUnionType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNumber, uint64_t:unsigned long long SizeInBits, uint32_t:unsigned int AlignInBits, LLVMDIFlags:LLVMDIFlags Flags, LLVMMetadataRef * Elements, unsigned int NumElements, unsigned int RunTimeLang, const char* UniqueId, size_t:unsigned long long UniqueIdLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateArrayType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateArrayType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, uint64_t:unsigned long long Size, uint32_t:unsigned int AlignInBits, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty, LLVMMetadataRef * Subscripts, unsigned int NumSubscripts);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateVectorType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateVectorType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, uint64_t:unsigned long long Size, uint32_t:unsigned int AlignInBits, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty, LLVMMetadataRef * Subscripts, unsigned int NumSubscripts);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateUnspecifiedType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateUnspecifiedType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, const char* Name, size_t:unsigned long long NameLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateBasicType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateBasicType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, const char* Name, size_t:unsigned long long NameLen, uint64_t:unsigned long long SizeInBits, LLVMDWARFTypeEncoding:unsigned int Encoding);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreatePointerType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreatePointerType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * PointeeTy, uint64_t:unsigned long long SizeInBits, uint32_t:unsigned int AlignInBits, unsigned int AddressSpace, const char* Name, size_t:unsigned long long NameLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateStructType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateStructType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNumber, uint64_t:unsigned long long SizeInBits, uint32_t:unsigned int AlignInBits, LLVMDIFlags:LLVMDIFlags Flags, LLVMMetadataRef:struct LLVMOpaqueMetadata * DerivedFrom, LLVMMetadataRef * Elements, unsigned int NumElements, unsigned int RunTimeLang, LLVMMetadataRef:struct LLVMOpaqueMetadata * VTableHolder, const char* UniqueId, size_t:unsigned long long UniqueIdLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateMemberType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateMemberType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNo, uint64_t:unsigned long long SizeInBits, uint32_t:unsigned int AlignInBits, uint64_t:unsigned long long OffsetInBits, LLVMDIFlags:LLVMDIFlags Flags, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateStaticMemberType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateStaticMemberType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNumber, LLVMMetadataRef:struct LLVMOpaqueMetadata * Type, LLVMDIFlags:LLVMDIFlags Flags, LLVMValueRef:struct LLVMOpaqueValue * ConstantVal, uint32_t:unsigned int AlignInBits);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateMemberPointerType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateMemberPointerType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * PointeeType, LLVMMetadataRef:struct LLVMOpaqueMetadata * ClassType, uint64_t:unsigned long long SizeInBits, uint32_t:unsigned int AlignInBits, LLVMDIFlags:LLVMDIFlags Flags);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateObjCIVar")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateObjCIVar(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNo, uint64_t:unsigned long long SizeInBits, uint32_t:unsigned int AlignInBits, uint64_t:unsigned long long OffsetInBits, LLVMDIFlags:LLVMDIFlags Flags, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty, LLVMMetadataRef:struct LLVMOpaqueMetadata * PropertyNode);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateObjCProperty")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateObjCProperty(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNo, const char* GetterName, size_t:unsigned long long GetterNameLen, const char* SetterName, size_t:unsigned long long SetterNameLen, unsigned int PropertyAttributes, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateObjectPointerType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateObjectPointerType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Type);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateQualifiedType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateQualifiedType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, unsigned int Tag, LLVMMetadataRef:struct LLVMOpaqueMetadata * Type);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateReferenceType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateReferenceType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, unsigned int Tag, LLVMMetadataRef:struct LLVMOpaqueMetadata * Type);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateNullPtrType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateNullPtrType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateTypedef")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateTypedef(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Type, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNo, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateInheritance")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateInheritance(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty, LLVMMetadataRef:struct LLVMOpaqueMetadata * BaseTy, uint64_t:unsigned long long BaseOffset, uint32_t:unsigned int VBPtrOffset, LLVMDIFlags:LLVMDIFlags Flags);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateForwardDecl")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateForwardDecl(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, unsigned int Tag, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int Line, unsigned int RuntimeLang, uint64_t:unsigned long long SizeInBits, uint32_t:unsigned int AlignInBits, const char* UniqueIdentifier, size_t:unsigned long long UniqueIdentifierLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateReplaceableCompositeType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateReplaceableCompositeType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, unsigned int Tag, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int Line, unsigned int RuntimeLang, uint64_t:unsigned long long SizeInBits, uint32_t:unsigned int AlignInBits, LLVMDIFlags:LLVMDIFlags Flags, const char* UniqueIdentifier, size_t:unsigned long long UniqueIdentifierLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateBitFieldMemberType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateBitFieldMemberType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNumber, uint64_t:unsigned long long SizeInBits, uint64_t:unsigned long long OffsetInBits, uint64_t:unsigned long long StorageOffsetInBits, LLVMDIFlags:LLVMDIFlags Flags, LLVMMetadataRef:struct LLVMOpaqueMetadata * Type);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateClassType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateClassType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNumber, uint64_t:unsigned long long SizeInBits, uint32_t:unsigned int AlignInBits, uint64_t:unsigned long long OffsetInBits, LLVMDIFlags:LLVMDIFlags Flags, LLVMMetadataRef:struct LLVMOpaqueMetadata * DerivedFrom, LLVMMetadataRef * Elements, unsigned int NumElements, LLVMMetadataRef:struct LLVMOpaqueMetadata * VTableHolder, LLVMMetadataRef:struct LLVMOpaqueMetadata * TemplateParamsNode, const char* UniqueIdentifier, size_t:unsigned long long UniqueIdentifierLen);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateArtificialType")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateArtificialType(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Type);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDITypeGetName")]
    public static extern const char* LLVMDITypeGetName(
LLVMMetadataRef:struct LLVMOpaqueMetadata * DType, size_t * Length);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDITypeGetSizeInBits")]
    public static extern uint64_t LLVMDITypeGetSizeInBits(
LLVMMetadataRef:struct LLVMOpaqueMetadata * DType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDITypeGetOffsetInBits")]
    public static extern uint64_t LLVMDITypeGetOffsetInBits(
LLVMMetadataRef:struct LLVMOpaqueMetadata * DType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDITypeGetAlignInBits")]
    public static extern uint32_t LLVMDITypeGetAlignInBits(
LLVMMetadataRef:struct LLVMOpaqueMetadata * DType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDITypeGetLine")]
    public static extern unsigned int LLVMDITypeGetLine(
    LLVMMetadataRef:struct LLVMOpaqueMetadata * DType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDITypeGetFlags")]
    public static extern LLVMDIFlags LLVMDITypeGetFlags(
LLVMMetadataRef:struct LLVMOpaqueMetadata * DType);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderGetOrCreateSubrange")]
    public static extern LLVMMetadataRef LLVMDIBuilderGetOrCreateSubrange(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, int64_t:long long LowerBound, int64_t:long long Count);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderGetOrCreateArray")]
    public static extern LLVMMetadataRef LLVMDIBuilderGetOrCreateArray(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef * Data, size_t:unsigned long long NumElements);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateExpression")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateExpression(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, int64_t * Addr, size_t:unsigned long long Length);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateConstantValueExpression")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateConstantValueExpression(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, int64_t:long long Value);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateGlobalVariableExpression")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateGlobalVariableExpression(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, const char* Linkage, size_t:unsigned long long LinkLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNo, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty, LLVMBool:int LocalToUnit, LLVMMetadataRef:struct LLVMOpaqueMetadata * Expr, LLVMMetadataRef:struct LLVMOpaqueMetadata * Decl, uint32_t:unsigned int AlignInBits);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMTemporaryMDNode")]
    public static extern LLVMMetadataRef LLVMTemporaryMDNode(
LLVMContextRef:struct LLVMOpaqueContext * Ctx, LLVMMetadataRef * Data, size_t:unsigned long long NumElements);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeTemporaryMDNode")]
    public static extern void LLVMDisposeTemporaryMDNode(
LLVMMetadataRef:struct LLVMOpaqueMetadata * TempNode);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMetadataReplaceAllUsesWith")]
    public static extern void LLVMMetadataReplaceAllUsesWith(
LLVMMetadataRef:struct LLVMOpaqueMetadata * TempTargetMetadata, LLVMMetadataRef:struct LLVMOpaqueMetadata * Replacement);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateTempGlobalVariableFwdDecl")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateTempGlobalVariableFwdDecl(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, const char* Linkage, size_t:unsigned long long LnkLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNo, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty, LLVMBool:int LocalToUnit, LLVMMetadataRef:struct LLVMOpaqueMetadata * Decl, uint32_t:unsigned int AlignInBits);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderInsertDeclareBefore")]
    public static extern LLVMValueRef LLVMDIBuilderInsertDeclareBefore(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMValueRef:struct LLVMOpaqueValue * Storage, LLVMMetadataRef:struct LLVMOpaqueMetadata * VarInfo, LLVMMetadataRef:struct LLVMOpaqueMetadata * Expr, LLVMMetadataRef:struct LLVMOpaqueMetadata * DebugLoc, LLVMValueRef:struct LLVMOpaqueValue * Instr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderInsertDeclareAtEnd")]
    public static extern LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMValueRef:struct LLVMOpaqueValue * Storage, LLVMMetadataRef:struct LLVMOpaqueMetadata * VarInfo, LLVMMetadataRef:struct LLVMOpaqueMetadata * Expr, LLVMMetadataRef:struct LLVMOpaqueMetadata * DebugLoc, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Block);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderInsertDbgValueBefore")]
    public static extern LLVMValueRef LLVMDIBuilderInsertDbgValueBefore(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMMetadataRef:struct LLVMOpaqueMetadata * VarInfo, LLVMMetadataRef:struct LLVMOpaqueMetadata * Expr, LLVMMetadataRef:struct LLVMOpaqueMetadata * DebugLoc, LLVMValueRef:struct LLVMOpaqueValue * Instr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderInsertDbgValueAtEnd")]
    public static extern LLVMValueRef LLVMDIBuilderInsertDbgValueAtEnd(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMValueRef:struct LLVMOpaqueValue * Val, LLVMMetadataRef:struct LLVMOpaqueMetadata * VarInfo, LLVMMetadataRef:struct LLVMOpaqueMetadata * Expr, LLVMMetadataRef:struct LLVMOpaqueMetadata * DebugLoc, LLVMBasicBlockRef:struct LLVMOpaqueBasicBlock * Block);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateAutoVariable")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateAutoVariable(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNo, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty, LLVMBool:int AlwaysPreserve, LLVMDIFlags:LLVMDIFlags Flags, uint32_t:unsigned int AlignInBits);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDIBuilderCreateParameterVariable")]
    public static extern LLVMMetadataRef LLVMDIBuilderCreateParameterVariable(
LLVMDIBuilderRef:struct LLVMOpaqueDIBuilder * Builder, LLVMMetadataRef:struct LLVMOpaqueMetadata * Scope, const char* Name, size_t:unsigned long long NameLen, unsigned int ArgNo, LLVMMetadataRef:struct LLVMOpaqueMetadata * File, unsigned int LineNo, LLVMMetadataRef:struct LLVMOpaqueMetadata * Ty, LLVMBool:int AlwaysPreserve, LLVMDIFlags:LLVMDIFlags Flags);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSubprogram")]
    public static extern LLVMMetadataRef LLVMGetSubprogram(
LLVMValueRef:struct LLVMOpaqueValue * Func);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetSubprogram")]
    public static extern void LLVMSetSubprogram(
LLVMValueRef:struct LLVMOpaqueValue * Func, LLVMMetadataRef:struct LLVMOpaqueMetadata * SP);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateDisasm")]
    public static extern LLVMDisasmContextRef LLVMCreateDisasm(
const char* TripleName, void* DisInfo, int TagType, LLVMOpInfoCallback:int (*)(void*, uint64_t, uint64_t, uint64_t, int, void*) GetOpInfo, LLVMSymbolLookupCallback:const char*(*)(void*, uint64_t, uint64_t*, uint64_t, const char**) SymbolLookUp);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateDisasmCPU")]
    public static extern LLVMDisasmContextRef LLVMCreateDisasmCPU(
const char* Triple, const char* CPU, void* DisInfo, int TagType, LLVMOpInfoCallback:int (*)(void*, uint64_t, uint64_t, uint64_t, int, void*) GetOpInfo, LLVMSymbolLookupCallback:const char*(*)(void*, uint64_t, uint64_t*, uint64_t, const char**) SymbolLookUp);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateDisasmCPUFeatures")]
    public static extern LLVMDisasmContextRef LLVMCreateDisasmCPUFeatures(
const char* Triple, const char* CPU, const char* Features, void* DisInfo, int TagType, LLVMOpInfoCallback:int (*)(void*, uint64_t, uint64_t, uint64_t, int, void*) GetOpInfo, LLVMSymbolLookupCallback:const char*(*)(void*, uint64_t, uint64_t*, uint64_t, const char**) SymbolLookUp);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetDisasmOptions")]
    public static extern int LLVMSetDisasmOptions(
LLVMDisasmContextRef:void* DC, uint64_t:unsigned long long Options);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisasmDispose")]
    public static extern void LLVMDisasmDispose(
LLVMDisasmContextRef:void* DC);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisasmInstruction")]
    public static extern size_t LLVMDisasmInstruction(
LLVMDisasmContextRef:void* DC, uint8_t* Bytes, uint64_t:unsigned long long BytesSize, uint64_t:unsigned long long PC, char* OutString, size_t:unsigned long long OutStringSize);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetModuleDataLayout")]
    public static extern LLVMTargetDataRef LLVMGetModuleDataLayout(
LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetModuleDataLayout")]
    public static extern void LLVMSetModuleDataLayout(
LLVMModuleRef:struct LLVMOpaqueModule * M, LLVMTargetDataRef:struct LLVMOpaqueTargetData * DL);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateTargetData")]
    public static extern LLVMTargetDataRef LLVMCreateTargetData(
const char* StringRep);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeTargetData")]
    public static extern void LLVMDisposeTargetData(
LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddTargetLibraryInfo")]
    public static extern void LLVMAddTargetLibraryInfo(
LLVMTargetLibraryInfoRef:struct LLVMOpaqueTargetLibraryInfotData * TLI, LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCopyStringRepOfTargetData")]
    public static extern char* LLVMCopyStringRepOfTargetData(
LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMByteOrder")]
    public static extern enum LLVMByteOrdering  LLVMByteOrder(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPointerSize")]
    public static extern unsigned int LLVMPointerSize(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPointerSizeForAS")]
    public static extern unsigned int LLVMPointerSizeForAS(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, unsigned int AS);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIntPtrType")]
    public static extern LLVMTypeRef LLVMIntPtrType(
LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIntPtrTypeForAS")]
    public static extern LLVMTypeRef LLVMIntPtrTypeForAS(
LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, unsigned int AS);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIntPtrTypeInContext")]
    public static extern LLVMTypeRef LLVMIntPtrTypeInContext(
LLVMContextRef:struct LLVMOpaqueContext * C, LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIntPtrTypeForASInContext")]
    public static extern LLVMTypeRef LLVMIntPtrTypeForASInContext(
LLVMContextRef:struct LLVMOpaqueContext * C, LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, unsigned int AS);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSizeOfTypeInBits")]
    public static extern unsigned long long LLVMSizeOfTypeInBits(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMStoreSizeOfType")]
    public static extern unsigned long long LLVMStoreSizeOfType(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMABISizeOfType")]
    public static extern unsigned long long LLVMABISizeOfType(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMABIAlignmentOfType")]
    public static extern unsigned int LLVMABIAlignmentOfType(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCallFrameAlignmentOfType")]
    public static extern unsigned int LLVMCallFrameAlignmentOfType(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPreferredAlignmentOfType")]
    public static extern unsigned int LLVMPreferredAlignmentOfType(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, LLVMTypeRef:struct LLVMOpaqueType * Ty);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPreferredAlignmentOfGlobal")]
    public static extern unsigned int LLVMPreferredAlignmentOfGlobal(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, LLVMValueRef:struct LLVMOpaqueValue * GlobalVar);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMElementAtOffset")]
    public static extern unsigned int LLVMElementAtOffset(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, LLVMTypeRef:struct LLVMOpaqueType * StructTy, ulong Offset);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOffsetOfElement")]
    public static extern unsigned long long LLVMOffsetOfElement(
    LLVMTargetDataRef:struct LLVMOpaqueTargetData * TD, LLVMTypeRef:struct LLVMOpaqueType * StructTy, unsigned int Element);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetNextTarget")]
    public static extern LLVMTargetRef LLVMGetNextTarget(
LLVMTargetRef:struct LLVMTarget * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTargetFromName")]
    public static extern LLVMTargetRef LLVMGetTargetFromName(
const char* Name);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTargetFromTriple")]
    public static extern LLVMBool LLVMGetTargetFromTriple(
const char* Triple, LLVMTargetRef* T, char** ErrorMessage);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTargetName")]
    public static extern const char* LLVMGetTargetName(
LLVMTargetRef:struct LLVMTarget * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTargetDescription")]
    public static extern const char* LLVMGetTargetDescription(
LLVMTargetRef:struct LLVMTarget * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMTargetHasJIT")]
    public static extern LLVMBool LLVMTargetHasJIT(
LLVMTargetRef:struct LLVMTarget * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMTargetHasTargetMachine")]
    public static extern LLVMBool LLVMTargetHasTargetMachine(
LLVMTargetRef:struct LLVMTarget * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMTargetHasAsmBackend")]
    public static extern LLVMBool LLVMTargetHasAsmBackend(
LLVMTargetRef:struct LLVMTarget * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateTargetMachine")]
    public static extern LLVMTargetMachineRef LLVMCreateTargetMachine(
LLVMTargetRef:struct LLVMTarget * T, const char* Triple, const char* CPU, const char* Features, LLVMCodeGenOptLevel:LLVMCodeGenOptLevel Level, LLVMRelocMode:LLVMRelocMode Reloc, LLVMCodeModel:LLVMCodeModel CodeModel);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeTargetMachine")]
    public static extern void LLVMDisposeTargetMachine(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTargetMachineTarget")]
    public static extern LLVMTargetRef LLVMGetTargetMachineTarget(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTargetMachineTriple")]
    public static extern char* LLVMGetTargetMachineTriple(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTargetMachineCPU")]
    public static extern char* LLVMGetTargetMachineCPU(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetTargetMachineFeatureString")]
    public static extern char* LLVMGetTargetMachineFeatureString(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateTargetDataLayout")]
    public static extern LLVMTargetDataRef LLVMCreateTargetDataLayout(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * T);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSetTargetMachineAsmVerbosity")]
    public static extern void LLVMSetTargetMachineAsmVerbosity(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * T, LLVMBool:int VerboseAsm);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMTargetMachineEmitToFile")]
    public static extern LLVMBool LLVMTargetMachineEmitToFile(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * T, LLVMModuleRef:struct LLVMOpaqueModule * M, char* Filename, LLVMCodeGenFileType:LLVMCodeGenFileType codegen, char** ErrorMessage);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMTargetMachineEmitToMemoryBuffer")]
    public static extern LLVMBool LLVMTargetMachineEmitToMemoryBuffer(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * T, LLVMModuleRef:struct LLVMOpaqueModule * M, LLVMCodeGenFileType:LLVMCodeGenFileType codegen, char** ErrorMessage, LLVMMemoryBufferRef * OutMemBuf);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMNormalizeTargetTriple")]
    public static extern char* LLVMNormalizeTargetTriple(
const char* triple);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddAnalysisPasses")]
    public static extern void LLVMAddAnalysisPasses(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * T, LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateGenericValueOfInt")]
    public static extern LLVMGenericValueRef LLVMCreateGenericValueOfInt(
LLVMTypeRef:struct LLVMOpaqueType * Ty, ulong N, LLVMBool:int IsSigned);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateGenericValueOfPointer")]
    public static extern LLVMGenericValueRef LLVMCreateGenericValueOfPointer(
void* P);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateGenericValueOfFloat")]
    public static extern LLVMGenericValueRef LLVMCreateGenericValueOfFloat(
LLVMTypeRef:struct LLVMOpaqueType * Ty, double N);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGenericValueIntWidth")]
    public static extern unsigned int LLVMGenericValueIntWidth(
    LLVMGenericValueRef:struct LLVMOpaqueGenericValue * GenValRef);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGenericValueToInt")]
    public static extern unsigned long long LLVMGenericValueToInt(
    LLVMGenericValueRef:struct LLVMOpaqueGenericValue * GenVal, LLVMBool:int IsSigned);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGenericValueToPointer")]
    public static extern void* LLVMGenericValueToPointer(
LLVMGenericValueRef:struct LLVMOpaqueGenericValue * GenVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGenericValueToFloat")]
    public static extern double LLVMGenericValueToFloat(
LLVMTypeRef:struct LLVMOpaqueType * TyRef, LLVMGenericValueRef:struct LLVMOpaqueGenericValue * GenVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeGenericValue")]
    public static extern void LLVMDisposeGenericValue(
LLVMGenericValueRef:struct LLVMOpaqueGenericValue * GenVal);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateExecutionEngineForModule")]
    public static extern LLVMBool LLVMCreateExecutionEngineForModule(
LLVMExecutionEngineRef* OutEE, LLVMModuleRef:struct LLVMOpaqueModule * M, char** OutError);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateInterpreterForModule")]
    public static extern LLVMBool LLVMCreateInterpreterForModule(
LLVMExecutionEngineRef* OutInterp, LLVMModuleRef:struct LLVMOpaqueModule * M, char** OutError);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateJITCompilerForModule")]
    public static extern LLVMBool LLVMCreateJITCompilerForModule(
LLVMExecutionEngineRef* OutJIT, LLVMModuleRef:struct LLVMOpaqueModule * M, unsigned int OptLevel, char** OutError);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeMCJITCompilerOptions")]
    public static extern void LLVMInitializeMCJITCompilerOptions(
struct LLVMMCJITCompilerOptions * Options, size_t:unsigned long long SizeOfOptions);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateMCJITCompilerForModule")]
    public static extern LLVMBool LLVMCreateMCJITCompilerForModule(
LLVMExecutionEngineRef* OutJIT, LLVMModuleRef:struct LLVMOpaqueModule * M, struct LLVMMCJITCompilerOptions * Options, size_t:unsigned long long SizeOfOptions, char** OutError);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeExecutionEngine")]
    public static extern void LLVMDisposeExecutionEngine(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRunStaticConstructors")]
    public static extern void LLVMRunStaticConstructors(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRunStaticDestructors")]
    public static extern void LLVMRunStaticDestructors(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRunFunctionAsMain")]
    public static extern int LLVMRunFunctionAsMain(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, LLVMValueRef:struct LLVMOpaqueValue * F, unsigned int ArgC, const char*const * ArgV, const char*const * EnvP);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRunFunction")]
    public static extern LLVMGenericValueRef LLVMRunFunction(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, LLVMValueRef:struct LLVMOpaqueValue * F, unsigned int NumArgs, LLVMGenericValueRef * Args);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMFreeMachineCodeForFunction")]
    public static extern void LLVMFreeMachineCodeForFunction(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, LLVMValueRef:struct LLVMOpaqueValue * F);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddModule")]
    public static extern void LLVMAddModule(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, LLVMModuleRef:struct LLVMOpaqueModule * M);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRemoveModule")]
    public static extern LLVMBool LLVMRemoveModule(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, LLVMModuleRef:struct LLVMOpaqueModule * M, LLVMModuleRef * OutMod, char** OutError);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMFindFunction")]
    public static extern LLVMBool LLVMFindFunction(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, const char* Name, LLVMValueRef * OutFn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMRecompileAndRelinkFunction")]
    public static extern void* LLVMRecompileAndRelinkFunction(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, LLVMValueRef:struct LLVMOpaqueValue * Fn);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetExecutionEngineTargetData")]
    public static extern LLVMTargetDataRef LLVMGetExecutionEngineTargetData(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetExecutionEngineTargetMachine")]
    public static extern LLVMTargetMachineRef LLVMGetExecutionEngineTargetMachine(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddGlobalMapping")]
    public static extern void LLVMAddGlobalMapping(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, LLVMValueRef:struct LLVMOpaqueValue * Global, void* Addr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetPointerToGlobal")]
    public static extern void* LLVMGetPointerToGlobal(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, LLVMValueRef:struct LLVMOpaqueValue * Global);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetGlobalValueAddress")]
    public static extern uint64_t LLVMGetGlobalValueAddress(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetFunctionAddress")]
    public static extern uint64_t LLVMGetFunctionAddress(
LLVMExecutionEngineRef:struct LLVMOpaqueExecutionEngine * EE, const char* Name);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateSimpleMCJITMemoryManager")]
    public static extern LLVMMCJITMemoryManagerRef LLVMCreateSimpleMCJITMemoryManager(
void* Opaque, LLVMMemoryManagerAllocateCodeSectionCallback:uint8_t*(*)(void*, uintptr_t, unsigned int, unsigned int, const char*) AllocateCodeSection, LLVMMemoryManagerAllocateDataSectionCallback:uint8_t* (*) (void*, uintptr_t, unsigned int, unsigned int, const char*, LLVMBool) AllocateDataSection, LLVMMemoryManagerFinalizeMemoryCallback:LLVMBool(*)(void*, char**) FinalizeMemory, LLVMMemoryManagerDestroyCallback:void (*) (void*) Destroy);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeMCJITMemoryManager")]
    public static extern void LLVMDisposeMCJITMemoryManager(
LLVMMCJITMemoryManagerRef:struct LLVMOpaqueMCJITMemoryManager * MM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeCore")]
    public static extern void LLVMInitializeCore(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeTransformUtils")]
    public static extern void LLVMInitializeTransformUtils(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeScalarOpts")]
    public static extern void LLVMInitializeScalarOpts(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeObjCARCOpts")]
    public static extern void LLVMInitializeObjCARCOpts(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeVectorization")]
    public static extern void LLVMInitializeVectorization(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeInstCombine")]
    public static extern void LLVMInitializeInstCombine(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeAggressiveInstCombiner")]
    public static extern void LLVMInitializeAggressiveInstCombiner(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeIPO")]
    public static extern void LLVMInitializeIPO(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeInstrumentation")]
    public static extern void LLVMInitializeInstrumentation(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeAnalysis")]
    public static extern void LLVMInitializeAnalysis(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeIPA")]
    public static extern void LLVMInitializeIPA(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeCodeGen")]
    public static extern void LLVMInitializeCodeGen(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMInitializeTarget")]
    public static extern void LLVMInitializeTarget(
LLVMPassRegistryRef:struct LLVMOpaquePassRegistry * R);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMParseIRInContext")]
    public static extern LLVMBool LLVMParseIRInContext(
LLVMContextRef:struct LLVMOpaqueContext * ContextRef, LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf, LLVMModuleRef * OutM, char** OutMessage);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMLinkModules2")]
    public static extern LLVMBool LLVMLinkModules2(
LLVMModuleRef:struct LLVMOpaqueModule * Dest, LLVMModuleRef:struct LLVMOpaqueModule * Src);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMCreateObjectFile")]
    public static extern LLVMObjectFileRef LLVMCreateObjectFile(
LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * MemBuf);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeObjectFile")]
    public static extern void LLVMDisposeObjectFile(
LLVMObjectFileRef:struct LLVMOpaqueObjectFile * ObjectFile);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSections")]
    public static extern LLVMSectionIteratorRef LLVMGetSections(
LLVMObjectFileRef:struct LLVMOpaqueObjectFile * ObjectFile);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeSectionIterator")]
    public static extern void LLVMDisposeSectionIterator(
LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsSectionIteratorAtEnd")]
    public static extern LLVMBool LLVMIsSectionIteratorAtEnd(
LLVMObjectFileRef:struct LLVMOpaqueObjectFile * ObjectFile, LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMoveToNextSection")]
    public static extern void LLVMMoveToNextSection(
LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMoveToContainingSection")]
    public static extern void LLVMMoveToContainingSection(
LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * Sect, LLVMSymbolIteratorRef:struct LLVMOpaqueSymbolIterator * Sym);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSymbols")]
    public static extern LLVMSymbolIteratorRef LLVMGetSymbols(
LLVMObjectFileRef:struct LLVMOpaqueObjectFile * ObjectFile);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeSymbolIterator")]
    public static extern void LLVMDisposeSymbolIterator(
LLVMSymbolIteratorRef:struct LLVMOpaqueSymbolIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsSymbolIteratorAtEnd")]
    public static extern LLVMBool LLVMIsSymbolIteratorAtEnd(
LLVMObjectFileRef:struct LLVMOpaqueObjectFile * ObjectFile, LLVMSymbolIteratorRef:struct LLVMOpaqueSymbolIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMoveToNextSymbol")]
    public static extern void LLVMMoveToNextSymbol(
LLVMSymbolIteratorRef:struct LLVMOpaqueSymbolIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSectionName")]
    public static extern const char* LLVMGetSectionName(
LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSectionSize")]
    public static extern uint64_t LLVMGetSectionSize(
LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSectionContents")]
    public static extern const char* LLVMGetSectionContents(
LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSectionAddress")]
    public static extern uint64_t LLVMGetSectionAddress(
LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSectionContainsSymbol")]
    public static extern LLVMBool LLVMGetSectionContainsSymbol(
LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * SI, LLVMSymbolIteratorRef:struct LLVMOpaqueSymbolIterator * Sym);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetRelocations")]
    public static extern LLVMRelocationIteratorRef LLVMGetRelocations(
LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * Section);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMDisposeRelocationIterator")]
    public static extern void LLVMDisposeRelocationIterator(
LLVMRelocationIteratorRef:struct LLVMOpaqueRelocationIterator * RI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMIsRelocationIteratorAtEnd")]
    public static extern LLVMBool LLVMIsRelocationIteratorAtEnd(
LLVMSectionIteratorRef:struct LLVMOpaqueSectionIterator * Section, LLVMRelocationIteratorRef:struct LLVMOpaqueRelocationIterator * RI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMMoveToNextRelocation")]
    public static extern void LLVMMoveToNextRelocation(
LLVMRelocationIteratorRef:struct LLVMOpaqueRelocationIterator * RI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSymbolName")]
    public static extern const char* LLVMGetSymbolName(
LLVMSymbolIteratorRef:struct LLVMOpaqueSymbolIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSymbolAddress")]
    public static extern uint64_t LLVMGetSymbolAddress(
LLVMSymbolIteratorRef:struct LLVMOpaqueSymbolIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetSymbolSize")]
    public static extern uint64_t LLVMGetSymbolSize(
LLVMSymbolIteratorRef:struct LLVMOpaqueSymbolIterator * SI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetRelocationOffset")]
    public static extern uint64_t LLVMGetRelocationOffset(
LLVMRelocationIteratorRef:struct LLVMOpaqueRelocationIterator * RI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetRelocationSymbol")]
    public static extern LLVMSymbolIteratorRef LLVMGetRelocationSymbol(
LLVMRelocationIteratorRef:struct LLVMOpaqueRelocationIterator * RI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetRelocationType")]
    public static extern uint64_t LLVMGetRelocationType(
LLVMRelocationIteratorRef:struct LLVMOpaqueRelocationIterator * RI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetRelocationTypeName")]
    public static extern const char* LLVMGetRelocationTypeName(
LLVMRelocationIteratorRef:struct LLVMOpaqueRelocationIterator * RI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMGetRelocationValueString")]
    public static extern const char* LLVMGetRelocationValueString(
LLVMRelocationIteratorRef:struct LLVMOpaqueRelocationIterator * RI);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcCreateInstance")]
    public static extern LLVMOrcJITStackRef LLVMOrcCreateInstance(
LLVMTargetMachineRef:struct LLVMOpaqueTargetMachine * TM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcGetErrorMsg")]
    public static extern const char* LLVMOrcGetErrorMsg(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcGetMangledSymbol")]
    public static extern void LLVMOrcGetMangledSymbol(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, char** MangledSymbol, const char* Symbol);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcDisposeMangledSymbol")]
    public static extern void LLVMOrcDisposeMangledSymbol(
char* MangledSymbol);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcCreateLazyCompileCallback")]
    public static extern LLVMOrcErrorCode LLVMOrcCreateLazyCompileCallback(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, LLVMOrcTargetAddress * RetAddr, LLVMOrcLazyCompileCallbackFn:uint64_t(*)(LLVMOrcJITStackRef, void*) Callback, void* CallbackCtx);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcCreateIndirectStub")]
    public static extern LLVMOrcErrorCode LLVMOrcCreateIndirectStub(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, const char* StubName, LLVMOrcTargetAddress:unsigned long long InitAddr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcSetIndirectStubPointer")]
    public static extern LLVMOrcErrorCode LLVMOrcSetIndirectStubPointer(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, const char* StubName, LLVMOrcTargetAddress:unsigned long long NewAddr);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcAddEagerlyCompiledIR")]
    public static extern LLVMOrcErrorCode LLVMOrcAddEagerlyCompiledIR(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, LLVMOrcModuleHandle * RetHandle, LLVMModuleRef:struct LLVMOpaqueModule * Mod, LLVMOrcSymbolResolverFn:uint64_t(*)(const char*, void*) SymbolResolver, void* SymbolResolverCtx);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcAddLazilyCompiledIR")]
    public static extern LLVMOrcErrorCode LLVMOrcAddLazilyCompiledIR(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, LLVMOrcModuleHandle * RetHandle, LLVMModuleRef:struct LLVMOpaqueModule * Mod, LLVMOrcSymbolResolverFn:uint64_t(*)(const char*, void*) SymbolResolver, void* SymbolResolverCtx);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcAddObjectFile")]
    public static extern LLVMOrcErrorCode LLVMOrcAddObjectFile(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, LLVMOrcModuleHandle * RetHandle, LLVMMemoryBufferRef:struct LLVMOpaqueMemoryBuffer * Obj, LLVMOrcSymbolResolverFn:uint64_t(*)(const char*, void*) SymbolResolver, void* SymbolResolverCtx);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcRemoveModule")]
    public static extern LLVMOrcErrorCode LLVMOrcRemoveModule(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, LLVMOrcModuleHandle:unsigned long long H);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcGetSymbolAddress")]
    public static extern LLVMOrcErrorCode LLVMOrcGetSymbolAddress(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, LLVMOrcTargetAddress * RetAddr, const char* SymbolName);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcGetSymbolAddressIn")]
    public static extern LLVMOrcErrorCode LLVMOrcGetSymbolAddressIn(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, LLVMOrcTargetAddress * RetAddr, LLVMOrcModuleHandle:unsigned long long H, const char* SymbolName);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcDisposeInstance")]
    public static extern LLVMOrcErrorCode LLVMOrcDisposeInstance(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcRegisterJITEventListener")]
    public static extern void LLVMOrcRegisterJITEventListener(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, LLVMJITEventListenerRef:struct LLVMOpaqueJITEventListener * L);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMOrcUnregisterJITEventListener")]
    public static extern void LLVMOrcUnregisterJITEventListener(
LLVMOrcJITStackRef:struct LLVMOrcOpaqueJITStack * JITStack, LLVMJITEventListenerRef:struct LLVMOpaqueJITEventListener * L);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMLoadLibraryPermanently")]
    public static extern LLVMBool LLVMLoadLibraryPermanently(
const char* Filename);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMParseCommandLineOptions")]
    public static extern void LLVMParseCommandLineOptions(
int argc, const char*const * argv, const char* Overview);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMSearchForAddressOfSymbol")]
    public static extern void* LLVMSearchForAddressOfSymbol(
const char* symbolName);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddSymbol")]
    public static extern void LLVMAddSymbol(
const char* symbolName, void* symbolValue);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddArgumentPromotionPass")]
    public static extern void LLVMAddArgumentPromotionPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddConstantMergePass")]
    public static extern void LLVMAddConstantMergePass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddCalledValuePropagationPass")]
    public static extern void LLVMAddCalledValuePropagationPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddDeadArgEliminationPass")]
    public static extern void LLVMAddDeadArgEliminationPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddFunctionAttrsPass")]
    public static extern void LLVMAddFunctionAttrsPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddFunctionInliningPass")]
    public static extern void LLVMAddFunctionInliningPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddAlwaysInlinerPass")]
    public static extern void LLVMAddAlwaysInlinerPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddGlobalDCEPass")]
    public static extern void LLVMAddGlobalDCEPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddGlobalOptimizerPass")]
    public static extern void LLVMAddGlobalOptimizerPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddIPConstantPropagationPass")]
    public static extern void LLVMAddIPConstantPropagationPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddPruneEHPass")]
    public static extern void LLVMAddPruneEHPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddIPSCCPPass")]
    public static extern void LLVMAddIPSCCPPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddInternalizePass")]
    public static extern void LLVMAddInternalizePass(
unsigned int AllButMain);
    [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddStripDeadPrototypesPass")]
    public static extern void LLVMAddStripDeadPrototypesPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddStripSymbolsPass")]
    public static extern void LLVMAddStripSymbolsPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPassManagerBuilderDispose")]
    public static extern void LLVMPassManagerBuilderDispose(
LLVMPassManagerBuilderRef:struct LLVMOpaquePassManagerBuilder * PMB);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPassManagerBuilderSetOptLevel")]
    public static extern void LLVMPassManagerBuilderSetOptLevel(
LLVMPassManagerBuilderRef:struct LLVMOpaquePassManagerBuilder * PMB, unsigned int OptLevel);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPassManagerBuilderSetSizeLevel")]
    public static extern void LLVMPassManagerBuilderSetSizeLevel(
LLVMPassManagerBuilderRef:struct LLVMOpaquePassManagerBuilder * PMB, unsigned int SizeLevel);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPassManagerBuilderSetDisableUnitAtATime")]
    public static extern void LLVMPassManagerBuilderSetDisableUnitAtATime(
LLVMPassManagerBuilderRef:struct LLVMOpaquePassManagerBuilder * PMB, LLVMBool:int Value);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPassManagerBuilderSetDisableUnrollLoops")]
    public static extern void LLVMPassManagerBuilderSetDisableUnrollLoops(
LLVMPassManagerBuilderRef:struct LLVMOpaquePassManagerBuilder * PMB, LLVMBool:int Value);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPassManagerBuilderSetDisableSimplifyLibCalls")]
    public static extern void LLVMPassManagerBuilderSetDisableSimplifyLibCalls(
LLVMPassManagerBuilderRef:struct LLVMOpaquePassManagerBuilder * PMB, LLVMBool:int Value);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPassManagerBuilderUseInlinerWithThreshold")]
    public static extern void LLVMPassManagerBuilderUseInlinerWithThreshold(
LLVMPassManagerBuilderRef:struct LLVMOpaquePassManagerBuilder * PMB, unsigned int Threshold);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPassManagerBuilderPopulateFunctionPassManager")]
    public static extern void LLVMPassManagerBuilderPopulateFunctionPassManager(
LLVMPassManagerBuilderRef:struct LLVMOpaquePassManagerBuilder * PMB, LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPassManagerBuilderPopulateModulePassManager")]
    public static extern void LLVMPassManagerBuilderPopulateModulePassManager(
LLVMPassManagerBuilderRef:struct LLVMOpaquePassManagerBuilder * PMB, LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMPassManagerBuilderPopulateLTOPassManager")]
    public static extern void LLVMPassManagerBuilderPopulateLTOPassManager(
LLVMPassManagerBuilderRef:struct LLVMOpaquePassManagerBuilder * PMB, LLVMPassManagerRef:struct LLVMOpaquePassManager * PM, LLVMBool:int Internalize, LLVMBool:int RunInliner);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddAggressiveDCEPass")]
    public static extern void LLVMAddAggressiveDCEPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddAggressiveInstCombinerPass")]
    public static extern void LLVMAddAggressiveInstCombinerPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddBitTrackingDCEPass")]
    public static extern void LLVMAddBitTrackingDCEPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddAlignmentFromAssumptionsPass")]
    public static extern void LLVMAddAlignmentFromAssumptionsPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddCFGSimplificationPass")]
    public static extern void LLVMAddCFGSimplificationPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddDeadStoreEliminationPass")]
    public static extern void LLVMAddDeadStoreEliminationPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddScalarizerPass")]
    public static extern void LLVMAddScalarizerPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddMergedLoadStoreMotionPass")]
    public static extern void LLVMAddMergedLoadStoreMotionPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddGVNPass")]
    public static extern void LLVMAddGVNPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddNewGVNPass")]
    public static extern void LLVMAddNewGVNPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddIndVarSimplifyPass")]
    public static extern void LLVMAddIndVarSimplifyPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddInstructionCombiningPass")]
    public static extern void LLVMAddInstructionCombiningPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddJumpThreadingPass")]
    public static extern void LLVMAddJumpThreadingPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddLICMPass")]
    public static extern void LLVMAddLICMPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddLoopDeletionPass")]
    public static extern void LLVMAddLoopDeletionPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddLoopIdiomPass")]
    public static extern void LLVMAddLoopIdiomPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddLoopRotatePass")]
    public static extern void LLVMAddLoopRotatePass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddLoopRerollPass")]
    public static extern void LLVMAddLoopRerollPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddLoopUnrollPass")]
    public static extern void LLVMAddLoopUnrollPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddLoopUnrollAndJamPass")]
    public static extern void LLVMAddLoopUnrollAndJamPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddLoopUnswitchPass")]
    public static extern void LLVMAddLoopUnswitchPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddMemCpyOptPass")]
    public static extern void LLVMAddMemCpyOptPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddPartiallyInlineLibCallsPass")]
    public static extern void LLVMAddPartiallyInlineLibCallsPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddReassociatePass")]
    public static extern void LLVMAddReassociatePass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddSCCPPass")]
    public static extern void LLVMAddSCCPPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddScalarReplAggregatesPass")]
    public static extern void LLVMAddScalarReplAggregatesPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddScalarReplAggregatesPassSSA")]
    public static extern void LLVMAddScalarReplAggregatesPassSSA(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddScalarReplAggregatesPassWithThreshold")]
    public static extern void LLVMAddScalarReplAggregatesPassWithThreshold(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM, int Threshold);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddSimplifyLibCallsPass")]
    public static extern void LLVMAddSimplifyLibCallsPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddTailCallEliminationPass")]
    public static extern void LLVMAddTailCallEliminationPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddConstantPropagationPass")]
    public static extern void LLVMAddConstantPropagationPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddDemoteMemoryToRegisterPass")]
    public static extern void LLVMAddDemoteMemoryToRegisterPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddVerifierPass")]
    public static extern void LLVMAddVerifierPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddCorrelatedValuePropagationPass")]
    public static extern void LLVMAddCorrelatedValuePropagationPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddEarlyCSEPass")]
    public static extern void LLVMAddEarlyCSEPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddEarlyCSEMemSSAPass")]
    public static extern void LLVMAddEarlyCSEMemSSAPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddLowerExpectIntrinsicPass")]
    public static extern void LLVMAddLowerExpectIntrinsicPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddTypeBasedAliasAnalysisPass")]
    public static extern void LLVMAddTypeBasedAliasAnalysisPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddScopedNoAliasAAPass")]
    public static extern void LLVMAddScopedNoAliasAAPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddBasicAliasAnalysisPass")]
    public static extern void LLVMAddBasicAliasAnalysisPass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddLoopVectorizePass")]
    public static extern void LLVMAddLoopVectorizePass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            [DllImport(libllvm, CallingConvention = CallingConvention.ThisCall, EntryPoint = "LLVMAddSLPVectorizePass")]
    public static extern void LLVMAddSLPVectorizePass(
LLVMPassManagerRef:struct LLVMOpaquePassManager * PM);
            
                }
// End of translation unit.

