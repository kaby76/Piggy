import_file 'c:/temp/include/clang-c/Index.h';
compiler_option '-IC:/temp/include';

namespace ClangSharp;
dllimport 'libclang';
class_name clang;
prefix_strip clang_;

// ( NodeType a=v ..... )
// [[ text ]]
// {{ code }}

pass GenerateHeader;

template 
// Force generation of declarations at start of the file.
( TranslationUnitDecl
[[
// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace clang-c {

]] Pointer=*
)
;

pass GenerateEnums;

template
   ( SrcRange=".*\\clang-c\\.*"
      (* EnumDecl
         {{
             vars["first"] = true;
             result.Append("public enum @" + tree.Peek(0).Attr("Name") + " {" + Environment.NewLine);
         }}
         (%
            ( EnumConstantDecl
               ( IntegerLiteral
                  {{
                     if ((bool)vars["first"])
                        vars["first"] = false;
                     else
                        result.Append(", ");
                     result.Append("@" + tree.Peek(1).Attr("Name") + " = " + tree.Peek(0).Attr("Value") + Environment.NewLine);
                  }}
               )
            )
            |
            ( EnumConstantDecl
               {{
                  if ((bool)vars["first"])
                     vars["first"] = false;
                  else
                     result.Append(", ");
                  result.Append("@" + tree.Peek(0).Attr("Name") + Environment.NewLine);
               }}
            )
         %)*
         [[
}

         ]]
      *)
   )
   ;

pass Functions;

template ( ParmVarDecl Type="const wchar_t *"
   {{
        result.Append("int " + tree.Peek(0).Attr("Name") + Environment.NewLine);
   }}
   )
   ;

template ( ParmVarDecl
   {{
        result.Append("int " + tree.Peek(0).Attr("Name") + Environment.NewLine);
   }}
   )
   ;

template ( FunctionDecl
   {{
      result.Append("[DllImport(\"foobar\", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall," + Environment.NewLine);
      result.Append("\t EntryPoint=\"" + tree.Peek(0).Attr("Name") + "\")]" + Environment.NewLine);
      result.Append("internal static extern " + tree.Peek(0).Attr("Type") + " "
         + tree.Peek(0).Attr("Name") + "(" + tree.Peek(0).ChildrenOutput() + ");" + Environment.NewLine);
   }}
   )
   ;

pass GenerateEnd;

template 
( TranslationUnitDecl
[[
}
// End of translation unit.
]]
)
;
