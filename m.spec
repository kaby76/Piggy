import_file 'c:/temp/include/clang-c/Index.h';
compiler_option '-IC:/temp/include';
using "./Piggy/bin/bin/Debug/net472/Piggy.dll";

pass GenerateHeader;

template 
// Generate declarations at start of the file.
( TranslationUnitDecl
[[
// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace clangc {

]] Pointer=*
)
;

pass GenerateEnums;

template
   ( SrcRange=".*\\clang-c\\.*"
      (* EnumDecl
         {{
             vars["first"] = true;
             result.Append("public enum @" + tree.Peek(0).Attr("Name") + " {" + Environment.NewLine);
         }}
         (%
            ( EnumConstantDecl
               ( IntegerLiteral
                  {{
                     if ((bool)vars["first"])
                        vars["first"] = false;
                     else
                        result.Append(", ");
                     result.Append("@" + tree.Peek(1).Attr("Name") + " = " + tree.Peek(0).Attr("Value") + Environment.NewLine);
                  }}
               )
            )
            |
            ( EnumConstantDecl
               {{
                  if ((bool)vars["first"])
                     vars["first"] = false;
                  else
                     result.Append(", ");
                  result.Append("@" + tree.Peek(0).Attr("Name") + Environment.NewLine);
               }}
            )
         %)*
         [[}

]]
      *)
   )
   ;

pass CollectReturns;

template
   ( SrcRange=".*\\clang-c\\.*"
      (* FunctionDecl Name=*
         {{
            object v;
            vars.TryGetValue("signatures", out v);
            if (v == null) { v = (object) new List<string>(); vars["signatures"] = v; }
            var list = (List<string>) v;
            list.Add((string)tree.Peek(0).Attr("Type"));
         }}
      *)
   )
   ;

pass GenerateReturns;

template
   ( TranslationUnitDecl
      {{
         var list = (List<string>)vars["signatures"];
         foreach (var l in list)
         {
				var m = Piggy.TemplateHelpers.GetFunctionReturn(l);
				var b = Piggy.TemplateHelpers.BaseType(m);
				if (!b) continue;
            result.AppendLine(
@"
public partial struct " + l + @"
{
   public " + l + @"(IntPtr pointer)
   {
      this.Pointer = pointer;
   }
   public IntPtr Pointer;
}

");
         }
      }}
   )
   ;


pass Functions;

template
   ( SrcRange=".*\\clang-c\\.*"
      (* FunctionDecl Name=*
         {{
            result.Append("[DllImport(\"foobar\", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,"
               + " EntryPoint=\"" + tree.Peek(0).Attr("Name") + "\")]" + Environment.NewLine);
            result.Append("public static extern "
               + Piggy.TemplateHelpers.GetFunctionReturn((string)tree.Peek(0).Attr("Type")) + " "
               + tree.Peek(0).Attr("Name") + "(");
             vars["first"] = true;
         }}
         ( ParmVarDecl Name=* Type=*
            {{
               if ((bool)vars["first"])
                  vars["first"] = false;
               else
                  result.Append(", ");
               result.Append(tree.Peek(0).Attr("Type") + " " + tree.Peek(0).Attr("Name"));
            }}
         )*
         [[);

]]
      *)
   )
   ;

pass GenerateEnd;

template 
( TranslationUnitDecl
[[
}
// End of translation unit.
]]
)
;
