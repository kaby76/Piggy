//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AstLexer.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class AstLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_DOC_COMMENT=1, DELIMITED_DOC_COMMENT=2, SINGLE_LINE_COMMENT=3, 
		DELIMITED_COMMENT=4, OPEN_PAREN=5, CLOSE_PAREN=6, EQUALS=7, StringLiteral=8, 
		ID=9, WS=10;
	public const int
		COMMENTS_CHANNEL=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENTS_CHANNEL"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", 
		"DELIMITED_COMMENT", "OPEN_PAREN", "CLOSE_PAREN", "EQUALS", "StringLiteral", 
		"ID", "InputCharacter", "Escape", "WS"
	};


	public AstLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AstLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", 
		"DELIMITED_COMMENT", "OPEN_PAREN", "CLOSE_PAREN", "EQUALS", "StringLiteral", 
		"ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AstLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AstLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', 'm', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '!', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '$', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '-', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x30', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', ';', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '>', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\x46', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', 'I', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', 'Y', '\n', '\t', '\f', '\t', '\xE', '\t', '\\', '\v', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x6', '\n', '\x61', '\n', '\n', '\r', 
		'\n', '\xE', '\n', '\x62', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x4', '.', 'G', '\x2', '\xE', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', 
		'\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', 
		'\v', '\x15', '\x2', '\x17', '\x2', '\x19', '\f', '\x3', '\x2', '\x6', 
		'\x5', '\x2', '\f', '\f', '\xF', '\xF', '$', '$', '\a', '\x2', '\x30', 
		'\x30', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', 
		'\x2', '\f', '\f', '\xF', '\xF', '\x87', '\x87', '\x202A', '\x202B', '\x5', 
		'\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', 'q', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '\'', '\x3', '\x2', '\x2', '\x2', '\a', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\x41', '\x3', '\x2', '\x2', '\x2', '\v', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\r', 'Q', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x11', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '`', '\x3', '\x2', '\x2', '\x2', '\x15', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x66', '\x3', '\x2', '\x2', '\x2', '\x19', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x31', '\x2', '\x2', 
		'\x1C', '\x1D', '\a', '\x31', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x31', 
		'\x2', '\x2', '\x1E', '\"', '\x3', '\x2', '\x2', '\x2', '\x1F', '!', '\x5', 
		'\x15', '\v', '\x2', ' ', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '$', 
		'\x3', '\x2', '\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\x3', '\x2', '\x2', '\x2', '#', '%', '\x3', '\x2', '\x2', '\x2', 
		'$', '\"', '\x3', '\x2', '\x2', '\x2', '%', '&', '\b', '\x2', '\x2', '\x2', 
		'&', '\x4', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x31', '\x2', 
		'\x2', '(', ')', '\a', ',', '\x2', '\x2', ')', '*', '\a', ',', '\x2', 
		'\x2', '*', '.', '\x3', '\x2', '\x2', '\x2', '+', '-', '\v', '\x2', '\x2', 
		'\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\a', ',', '\x2', '\x2', '\x32', 
		'\x33', '\a', '\x31', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x35', '\b', '\x3', '\x2', '\x2', '\x35', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\x31', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\x31', '\x2', '\x2', '\x38', '<', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ';', '\x5', '\x15', '\v', '\x2', ':', '\x39', '\x3', '\x2', 
		'\x2', '\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '?', '\x3', '\x2', 
		'\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', '@', '\b', '\x4', 
		'\x2', '\x2', '@', '\b', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', 
		'\x31', '\x2', '\x2', '\x42', '\x43', '\a', ',', '\x2', '\x2', '\x43', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\v', '\x2', '\x2', '\x2', 
		'\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'J', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\a', ',', '\x2', '\x2', 'K', 'L', '\a', 
		'\x31', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', 
		'\b', '\x5', '\x2', '\x2', 'N', '\n', '\x3', '\x2', '\x2', '\x2', 'O', 
		'P', '\a', '*', '\x2', '\x2', 'P', '\f', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'R', '\a', '+', '\x2', '\x2', 'R', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\a', '?', '\x2', '\x2', 'T', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'U', 'Z', '\a', '$', '\x2', '\x2', 'V', 'Y', '\x5', '\x17', '\f', '\x2', 
		'W', 'Y', '\n', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', 
		'\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', 
		'\x2', '\x2', ']', '^', '\a', '$', '\x2', '\x2', '^', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x61', '\t', '\x3', '\x2', '\x2', '`', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x14', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\n', 
		'\x4', '\x2', '\x2', '\x65', '\x16', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\a', '^', '\x2', '\x2', 'g', 'h', '\a', '$', '\x2', '\x2', 'h', 
		'\x18', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\t', '\x5', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\b', '\r', '\x3', '\x2', 
		'l', '\x1A', '\x3', '\x2', '\x2', '\x2', '\n', '\x2', '\"', '.', '<', 
		'G', 'X', 'Z', '\x62', '\x4', '\x2', '\x4', '\x2', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
