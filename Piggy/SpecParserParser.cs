//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SpecParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class SpecParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_DOC_COMMENT=1, DELIMITED_DOC_COMMENT=2, SINGLE_LINE_COMMENT=3, 
		DELIMITED_COMMENT=4, CODE=5, CLANG_FILE=6, CLANG_OPTION=7, EXTENDS=8, 
		HEADER=9, NAMESPACE=10, PASS=11, TEMPLATE=12, REWRITE=13, EQ=14, SEMI=15, 
		OR=16, STAR=17, PLUS=18, DOT=19, DOLLAR=20, OPEN_RE=21, CLOSE_RE=22, OPEN_PAREN=23, 
		CLOSE_PAREN=24, OPEN_KLEENE_STAR_PAREN=25, CLOSE_KLEENE_STAR_PAREN=26, 
		OPEN_BRACKET_NOT=27, OPEN_BRACKET=28, CLOSE_BRACKET=29, MINUS=30, LCURLY=31, 
		LANG=32, StringLiteral=33, ID=34, WS=35, RCURLY=36, OTHER=37, RANG=38, 
		OTHER_ANG=39;
	public const int
		RULE_spec = 0, RULE_items = 1, RULE_extends = 2, RULE_namespace = 3, RULE_header = 4, 
		RULE_clang_file = 5, RULE_clang_option = 6, RULE_template = 7, RULE_rexp = 8, 
		RULE_simple_rexp = 9, RULE_basic_rexp = 10, RULE_star_rexp = 11, RULE_plus_rexp = 12, 
		RULE_elementary_rexp = 13, RULE_group_rexp = 14, RULE_basic = 15, RULE_simple_basic = 16, 
		RULE_kleene_star_basic = 17, RULE_id_or_star_or_empty = 18, RULE_more = 19, 
		RULE_code = 20, RULE_text = 21, RULE_attr = 22, RULE_pass = 23;
	public static readonly string[] ruleNames = {
		"spec", "items", "extends", "namespace", "header", "clang_file", "clang_option", 
		"template", "rexp", "simple_rexp", "basic_rexp", "star_rexp", "plus_rexp", 
		"elementary_rexp", "group_rexp", "basic", "simple_basic", "kleene_star_basic", 
		"id_or_star_or_empty", "more", "code", "text", "attr", "pass"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'code'", "'clang_file'", "'clang_option'", 
		"'extends'", "'header'", "'namespace'", "'pass'", "'template'", "'=>'", 
		"'='", "';'", "'|'", "'*'", "'+'", "'.'", "'$'", "'(%'", "'%)'", "'('", 
		"')'", "'(*'", "'*)'", "'[^'", "'['", "']'", "'-'", null, null, null, 
		null, null, "'}}'", null, "']]'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", 
		"DELIMITED_COMMENT", "CODE", "CLANG_FILE", "CLANG_OPTION", "EXTENDS", 
		"HEADER", "NAMESPACE", "PASS", "TEMPLATE", "REWRITE", "EQ", "SEMI", "OR", 
		"STAR", "PLUS", "DOT", "DOLLAR", "OPEN_RE", "CLOSE_RE", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_KLEENE_STAR_PAREN", "CLOSE_KLEENE_STAR_PAREN", "OPEN_BRACKET_NOT", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "MINUS", "LCURLY", "LANG", "StringLiteral", 
		"ID", "WS", "RCURLY", "OTHER", "RANG", "OTHER_ANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SpecParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SpecParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SpecParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SpecParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SpecContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SpecParserParser.Eof, 0); }
		public ItemsContext[] items() {
			return GetRuleContexts<ItemsContext>();
		}
		public ItemsContext items(int i) {
			return GetRuleContext<ItemsContext>(i);
		}
		public SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitSpec(this);
		}
	}

	[RuleVersion(0)]
	public SpecContext spec() {
		SpecContext _localctx = new SpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLANG_FILE) | (1L << CLANG_OPTION) | (1L << EXTENDS) | (1L << HEADER) | (1L << NAMESPACE) | (1L << PASS) | (1L << TEMPLATE))) != 0)) {
				{
				{
				State = 48; items();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemsContext : ParserRuleContext {
		public ExtendsContext extends() {
			return GetRuleContext<ExtendsContext>(0);
		}
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		public Clang_fileContext clang_file() {
			return GetRuleContext<Clang_fileContext>(0);
		}
		public Clang_optionContext clang_option() {
			return GetRuleContext<Clang_optionContext>(0);
		}
		public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		public PassContext pass() {
			return GetRuleContext<PassContext>(0);
		}
		public ItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_items; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterItems(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitItems(this);
		}
	}

	[RuleVersion(0)]
	public ItemsContext items() {
		ItemsContext _localctx = new ItemsContext(Context, State);
		EnterRule(_localctx, 2, RULE_items);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTENDS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; extends();
				}
				break;
			case NAMESPACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; @namespace();
				}
				break;
			case HEADER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 58; header();
				}
				break;
			case CLANG_FILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 59; clang_file();
				}
				break;
			case CLANG_OPTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 60; clang_option();
				}
				break;
			case TEMPLATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 61; template();
				}
				break;
			case PASS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 62; pass();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsContext : ParserRuleContext {
		public ITerminalNode EXTENDS() { return GetToken(SpecParserParser.EXTENDS, 0); }
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public ExtendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extends; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterExtends(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitExtends(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsContext extends() {
		ExtendsContext _localctx = new ExtendsContext(Context, State);
		EnterRule(_localctx, 4, RULE_extends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(EXTENDS);
			State = 66; Match(ID);
			State = 67; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode NAMESPACE() { return GetToken(SpecParserParser.NAMESPACE, 0); }
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(NAMESPACE);
			State = 70; Match(ID);
			State = 71; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public ITerminalNode HEADER() { return GetToken(SpecParserParser.HEADER, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 8, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(HEADER);
			State = 74; code();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clang_fileContext : ParserRuleContext {
		public ITerminalNode CLANG_FILE() { return GetToken(SpecParserParser.CLANG_FILE, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SpecParserParser.StringLiteral, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public Clang_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clang_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterClang_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitClang_file(this);
		}
	}

	[RuleVersion(0)]
	public Clang_fileContext clang_file() {
		Clang_fileContext _localctx = new Clang_fileContext(Context, State);
		EnterRule(_localctx, 10, RULE_clang_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(CLANG_FILE);
			State = 77; Match(StringLiteral);
			State = 78; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clang_optionContext : ParserRuleContext {
		public ITerminalNode CLANG_OPTION() { return GetToken(SpecParserParser.CLANG_OPTION, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SpecParserParser.StringLiteral, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public Clang_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clang_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterClang_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitClang_option(this);
		}
	}

	[RuleVersion(0)]
	public Clang_optionContext clang_option() {
		Clang_optionContext _localctx = new Clang_optionContext(Context, State);
		EnterRule(_localctx, 12, RULE_clang_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(CLANG_OPTION);
			State = 81; Match(StringLiteral);
			State = 82; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContext : ParserRuleContext {
		public ITerminalNode TEMPLATE() { return GetToken(SpecParserParser.TEMPLATE, 0); }
		public RexpContext rexp() {
			return GetRuleContext<RexpContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 14, RULE_template);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(TEMPLATE);
			State = 85; rexp();
			State = 86; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RexpContext : ParserRuleContext {
		public Simple_rexpContext[] simple_rexp() {
			return GetRuleContexts<Simple_rexpContext>();
		}
		public Simple_rexpContext simple_rexp(int i) {
			return GetRuleContext<Simple_rexpContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(SpecParserParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(SpecParserParser.OR, i);
		}
		public RexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterRexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitRexp(this);
		}
	}

	[RuleVersion(0)]
	public RexpContext rexp() {
		RexpContext _localctx = new RexpContext(Context, State);
		EnterRule(_localctx, 16, RULE_rexp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; simple_rexp();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 89; Match(OR);
				State = 90; simple_rexp();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_rexpContext : ParserRuleContext {
		public Basic_rexpContext[] basic_rexp() {
			return GetRuleContexts<Basic_rexpContext>();
		}
		public Basic_rexpContext basic_rexp(int i) {
			return GetRuleContext<Basic_rexpContext>(i);
		}
		public Simple_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterSimple_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitSimple_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Simple_rexpContext simple_rexp() {
		Simple_rexpContext _localctx = new Simple_rexpContext(Context, State);
		EnterRule(_localctx, 18, RULE_simple_rexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 96; basic_rexp();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_rexpContext : ParserRuleContext {
		public Star_rexpContext star_rexp() {
			return GetRuleContext<Star_rexpContext>(0);
		}
		public Plus_rexpContext plus_rexp() {
			return GetRuleContext<Plus_rexpContext>(0);
		}
		public Elementary_rexpContext elementary_rexp() {
			return GetRuleContext<Elementary_rexpContext>(0);
		}
		public Basic_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterBasic_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitBasic_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Basic_rexpContext basic_rexp() {
		Basic_rexpContext _localctx = new Basic_rexpContext(Context, State);
		EnterRule(_localctx, 20, RULE_basic_rexp);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101; star_rexp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102; plus_rexp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 103; elementary_rexp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_rexpContext : ParserRuleContext {
		public Elementary_rexpContext elementary_rexp() {
			return GetRuleContext<Elementary_rexpContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(SpecParserParser.STAR, 0); }
		public Star_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterStar_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitStar_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Star_rexpContext star_rexp() {
		Star_rexpContext _localctx = new Star_rexpContext(Context, State);
		EnterRule(_localctx, 22, RULE_star_rexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; elementary_rexp();
			State = 107; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plus_rexpContext : ParserRuleContext {
		public Elementary_rexpContext elementary_rexp() {
			return GetRuleContext<Elementary_rexpContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(SpecParserParser.PLUS, 0); }
		public Plus_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plus_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterPlus_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitPlus_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Plus_rexpContext plus_rexp() {
		Plus_rexpContext _localctx = new Plus_rexpContext(Context, State);
		EnterRule(_localctx, 24, RULE_plus_rexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; elementary_rexp();
			State = 110; Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elementary_rexpContext : ParserRuleContext {
		public Group_rexpContext group_rexp() {
			return GetRuleContext<Group_rexpContext>(0);
		}
		public BasicContext basic() {
			return GetRuleContext<BasicContext>(0);
		}
		public Elementary_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementary_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterElementary_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitElementary_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Elementary_rexpContext elementary_rexp() {
		Elementary_rexpContext _localctx = new Elementary_rexpContext(Context, State);
		EnterRule(_localctx, 26, RULE_elementary_rexp);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_RE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; group_rexp();
				}
				break;
			case OPEN_PAREN:
			case OPEN_KLEENE_STAR_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; basic();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_rexpContext : ParserRuleContext {
		public ITerminalNode OPEN_RE() { return GetToken(SpecParserParser.OPEN_RE, 0); }
		public RexpContext rexp() {
			return GetRuleContext<RexpContext>(0);
		}
		public ITerminalNode CLOSE_RE() { return GetToken(SpecParserParser.CLOSE_RE, 0); }
		public Group_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterGroup_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitGroup_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Group_rexpContext group_rexp() {
		Group_rexpContext _localctx = new Group_rexpContext(Context, State);
		EnterRule(_localctx, 28, RULE_group_rexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(OPEN_RE);
			State = 117; rexp();
			State = 118; Match(CLOSE_RE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicContext : ParserRuleContext {
		public Simple_basicContext simple_basic() {
			return GetRuleContext<Simple_basicContext>(0);
		}
		public Kleene_star_basicContext kleene_star_basic() {
			return GetRuleContext<Kleene_star_basicContext>(0);
		}
		public BasicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterBasic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitBasic(this);
		}
	}

	[RuleVersion(0)]
	public BasicContext basic() {
		BasicContext _localctx = new BasicContext(Context, State);
		EnterRule(_localctx, 30, RULE_basic);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; simple_basic();
				}
				break;
			case OPEN_KLEENE_STAR_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; kleene_star_basic();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_basicContext : ParserRuleContext {
		public ITerminalNode OPEN_PAREN() { return GetToken(SpecParserParser.OPEN_PAREN, 0); }
		public Id_or_star_or_emptyContext id_or_star_or_empty() {
			return GetRuleContext<Id_or_star_or_emptyContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(SpecParserParser.CLOSE_PAREN, 0); }
		public MoreContext[] more() {
			return GetRuleContexts<MoreContext>();
		}
		public MoreContext more(int i) {
			return GetRuleContext<MoreContext>(i);
		}
		public Simple_basicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_basic; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterSimple_basic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitSimple_basic(this);
		}
	}

	[RuleVersion(0)]
	public Simple_basicContext simple_basic() {
		Simple_basicContext _localctx = new Simple_basicContext(Context, State);
		EnterRule(_localctx, 32, RULE_simple_basic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(OPEN_PAREN);
			State = 125; id_or_star_or_empty();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_RE) | (1L << OPEN_PAREN) | (1L << OPEN_KLEENE_STAR_PAREN) | (1L << LCURLY) | (1L << LANG) | (1L << ID))) != 0)) {
				{
				{
				State = 126; more();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kleene_star_basicContext : ParserRuleContext {
		public ITerminalNode OPEN_KLEENE_STAR_PAREN() { return GetToken(SpecParserParser.OPEN_KLEENE_STAR_PAREN, 0); }
		public Id_or_star_or_emptyContext id_or_star_or_empty() {
			return GetRuleContext<Id_or_star_or_emptyContext>(0);
		}
		public ITerminalNode CLOSE_KLEENE_STAR_PAREN() { return GetToken(SpecParserParser.CLOSE_KLEENE_STAR_PAREN, 0); }
		public MoreContext[] more() {
			return GetRuleContexts<MoreContext>();
		}
		public MoreContext more(int i) {
			return GetRuleContext<MoreContext>(i);
		}
		public Kleene_star_basicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kleene_star_basic; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterKleene_star_basic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitKleene_star_basic(this);
		}
	}

	[RuleVersion(0)]
	public Kleene_star_basicContext kleene_star_basic() {
		Kleene_star_basicContext _localctx = new Kleene_star_basicContext(Context, State);
		EnterRule(_localctx, 34, RULE_kleene_star_basic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(OPEN_KLEENE_STAR_PAREN);
			State = 135; id_or_star_or_empty();
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_RE) | (1L << OPEN_PAREN) | (1L << OPEN_KLEENE_STAR_PAREN) | (1L << LCURLY) | (1L << LANG) | (1L << ID))) != 0)) {
				{
				{
				State = 136; more();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142; Match(CLOSE_KLEENE_STAR_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_or_star_or_emptyContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode STAR() { return GetToken(SpecParserParser.STAR, 0); }
		public Id_or_star_or_emptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_or_star_or_empty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterId_or_star_or_empty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitId_or_star_or_empty(this);
		}
	}

	[RuleVersion(0)]
	public Id_or_star_or_emptyContext id_or_star_or_empty() {
		Id_or_star_or_emptyContext _localctx = new Id_or_star_or_emptyContext(Context, State);
		EnterRule(_localctx, 36, RULE_id_or_star_or_empty);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145; Match(STAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreContext : ParserRuleContext {
		public RexpContext rexp() {
			return GetRuleContext<RexpContext>(0);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		public MoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_more; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterMore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitMore(this);
		}
	}

	[RuleVersion(0)]
	public MoreContext more() {
		MoreContext _localctx = new MoreContext(Context, State);
		EnterRule(_localctx, 38, RULE_more);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_RE:
			case OPEN_PAREN:
			case OPEN_KLEENE_STAR_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149; rexp();
				}
				break;
			case LANG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150; text();
				}
				break;
			case LCURLY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 151; code();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 152; attr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public ITerminalNode LCURLY() { return GetToken(SpecParserParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(SpecParserParser.RCURLY, 0); }
		public ITerminalNode[] OTHER() { return GetTokens(SpecParserParser.OTHER); }
		public ITerminalNode OTHER(int i) {
			return GetToken(SpecParserParser.OTHER, i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 40, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(LCURLY);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OTHER) {
				{
				{
				State = 156; Match(OTHER);
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 162; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode LANG() { return GetToken(SpecParserParser.LANG, 0); }
		public ITerminalNode RANG() { return GetToken(SpecParserParser.RANG, 0); }
		public ITerminalNode[] OTHER_ANG() { return GetTokens(SpecParserParser.OTHER_ANG); }
		public ITerminalNode OTHER_ANG(int i) {
			return GetToken(SpecParserParser.OTHER_ANG, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 42, RULE_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(LANG);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OTHER_ANG) {
				{
				{
				State = 165; Match(OTHER_ANG);
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171; Match(RANG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode EQ() { return GetToken(SpecParserParser.EQ, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SpecParserParser.StringLiteral, 0); }
		public ITerminalNode STAR() { return GetToken(SpecParserParser.STAR, 0); }
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 44, RULE_attr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(ID);
			State = 174; Match(EQ);
			State = 175;
			_la = TokenStream.LA(1);
			if ( !(_la==STAR || _la==StringLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassContext : ParserRuleContext {
		public ITerminalNode PASS() { return GetToken(SpecParserParser.PASS, 0); }
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public PassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterPass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitPass(this);
		}
	}

	[RuleVersion(0)]
	public PassContext pass() {
		PassContext _localctx = new PassContext(Context, State);
		EnterRule(_localctx, 46, RULE_pass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(PASS);
			State = 178; Match(ID);
			State = 179; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\xB8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\a', '\x2', '\x34', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x37', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x42', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', '^', '\n', '\n', '\f', '\n', '\xE', '\n', '\x61', '\v', '\n', 
		'\x3', '\v', '\x6', '\v', '\x64', '\n', '\v', '\r', '\v', '\xE', '\v', 
		'\x65', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'k', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 'u', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '}', '\n', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x82', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x85', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x8C', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\x8F', '\v', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x96', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x9C', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\xA0', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xA3', '\v', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\a', 
		'\x17', '\xA9', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xAC', '\v', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x2', '\x2', '\x1A', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x2', '\x3', 
		'\x4', '\x2', '\x13', '\x13', '#', '#', '\x2', '\xB5', '\x2', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x43', '\x3', '\x2', '\x2', '\x2', '\b', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'K', '\x3', '\x2', '\x2', '\x2', '\f', 'N', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'R', '\x3', '\x2', '\x2', '\x2', '\x10', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'Z', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x16', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\x18', 'l', '\x3', '\x2', '\x2', '\x2', '\x1A', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', 't', '\x3', '\x2', '\x2', '\x2', '\x1E', 'v', '\x3', 
		'\x2', '\x2', '\x2', ' ', '|', '\x3', '\x2', '\x2', '\x2', '\"', '~', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x88', '\x3', '\x2', '\x2', '\x2', '&', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '(', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '*', '\x9D', '\x3', '\x2', '\x2', '\x2', ',', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x30', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x5', '\x4', '\x3', '\x2', 
		'\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\x2', 
		'\x2', '\x3', '\x39', '\x3', '\x3', '\x2', '\x2', '\x2', ':', '\x42', 
		'\x5', '\x6', '\x4', '\x2', ';', '\x42', '\x5', '\b', '\x5', '\x2', '<', 
		'\x42', '\x5', '\n', '\x6', '\x2', '=', '\x42', '\x5', '\f', '\a', '\x2', 
		'>', '\x42', '\x5', '\xE', '\b', '\x2', '?', '\x42', '\x5', '\x10', '\t', 
		'\x2', '@', '\x42', '\x5', '\x30', '\x19', '\x2', '\x41', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x41', ';', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x41', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '>', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\n', '\x2', '\x2', '\x44', 
		'\x45', '\a', '$', '\x2', '\x2', '\x45', '\x46', '\a', '\x11', '\x2', 
		'\x2', '\x46', '\a', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\f', 
		'\x2', '\x2', 'H', 'I', '\a', '$', '\x2', '\x2', 'I', 'J', '\a', '\x11', 
		'\x2', '\x2', 'J', '\t', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\v', 
		'\x2', '\x2', 'L', 'M', '\x5', '*', '\x16', '\x2', 'M', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\a', '\b', '\x2', '\x2', 'O', 'P', '\a', '#', 
		'\x2', '\x2', 'P', 'Q', '\a', '\x11', '\x2', '\x2', 'Q', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\a', '\t', '\x2', '\x2', 'S', 'T', '\a', 
		'#', '\x2', '\x2', 'T', 'U', '\a', '\x11', '\x2', '\x2', 'U', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\a', '\xE', '\x2', '\x2', 'W', 'X', '\x5', 
		'\x12', '\n', '\x2', 'X', 'Y', '\a', '\x11', '\x2', '\x2', 'Y', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '_', '\x5', '\x14', '\v', '\x2', '[', 
		'\\', '\a', '\x12', '\x2', '\x2', '\\', '^', '\x5', '\x14', '\v', '\x2', 
		']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x13', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x64', '\x5', '\x16', '\f', '\x2', '\x63', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x15', '\x3', '\x2', '\x2', '\x2', 'g', 'k', '\x5', 
		'\x18', '\r', '\x2', 'h', 'k', '\x5', '\x1A', '\xE', '\x2', 'i', 'k', 
		'\x5', '\x1C', '\xF', '\x2', 'j', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 
		'h', '\x3', '\x2', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', '\x17', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x5', '\x1C', '\xF', 
		'\x2', 'm', 'n', '\a', '\x13', '\x2', '\x2', 'n', '\x19', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\x5', '\x1C', '\xF', '\x2', 'p', 'q', '\a', '\x14', 
		'\x2', '\x2', 'q', '\x1B', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x5', 
		'\x1E', '\x10', '\x2', 's', 'u', '\x5', ' ', '\x11', '\x2', 't', 'r', 
		'\x3', '\x2', '\x2', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 'u', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\x17', '\x2', '\x2', 
		'w', 'x', '\x5', '\x12', '\n', '\x2', 'x', 'y', '\a', '\x18', '\x2', '\x2', 
		'y', '\x1F', '\x3', '\x2', '\x2', '\x2', 'z', '}', '\x5', '\"', '\x12', 
		'\x2', '{', '}', '\x5', '$', '\x13', '\x2', '|', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '!', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\a', '\x19', '\x2', '\x2', '\x7F', '\x83', '\x5', 
		'&', '\x14', '\x2', '\x80', '\x82', '\x5', '(', '\x15', '\x2', '\x81', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x1A', '\x2', 
		'\x2', '\x87', '#', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\x1B', '\x2', '\x2', '\x89', '\x8D', '\x5', '&', '\x14', '\x2', '\x8A', 
		'\x8C', '\x5', '(', '\x15', '\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\a', '\x1C', '\x2', '\x2', '\x91', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x96', '\a', '$', '\x2', '\x2', '\x93', 
		'\x96', '\a', '\x13', '\x2', '\x2', '\x94', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9C', '\x5', '\x12', '\n', 
		'\x2', '\x98', '\x9C', '\x5', ',', '\x17', '\x2', '\x99', '\x9C', '\x5', 
		'*', '\x16', '\x2', '\x9A', '\x9C', '\x5', '.', '\x18', '\x2', '\x9B', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', ')', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\xA1', '\a', '!', '\x2', '\x2', '\x9E', '\xA0', '\a', '\'', '\x2', '\x2', 
		'\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', '&', 
		'\x2', '\x2', '\xA5', '+', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xAA', 
		'\a', '\"', '\x2', '\x2', '\xA7', '\xA9', '\a', ')', '\x2', '\x2', '\xA8', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '(', '\x2', 
		'\x2', '\xAE', '-', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		'$', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x10', '\x2', '\x2', '\xB1', 
		'\xB2', '\t', '\x2', '\x2', '\x2', '\xB2', '/', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB4', '\a', '\r', '\x2', '\x2', '\xB4', '\xB5', '\a', '$', '\x2', 
		'\x2', '\xB5', '\xB6', '\a', '\x11', '\x2', '\x2', '\xB6', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x35', '\x41', '_', '\x65', 'j', 't', '|', 
		'\x83', '\x8D', '\x95', '\x9B', '\xA1', '\xAA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
