//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SpecParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class SpecParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_DOC_COMMENT=1, DELIMITED_DOC_COMMENT=2, SINGLE_LINE_COMMENT=3, 
		DELIMITED_COMMENT=4, CALLING_CONVENTION=5, ADD_AFTER_USINGS=6, CLASS_NAME=7, 
		CODE=8, COMPILER_OPTION=9, DLLIMPORT=10, EXCLUDE=11, IMPORT_FILE=12, NAMESPACE=13, 
		PASS=14, PREFIX_STRIP=15, TEMPLATE=16, REWRITE=17, EQ=18, SEMI=19, OR=20, 
		STAR=21, PLUS=22, DOT=23, DOLLAR=24, OPEN_RE=25, CLOSE_RE=26, OPEN_PAREN=27, 
		CLOSE_PAREN=28, OPEN_BRACKET_NOT=29, OPEN_BRACKET=30, CLOSE_BRACKET=31, 
		MINUS=32, LCURLY=33, LANG=34, StringLiteral=35, ID=36, WS=37, RCURLY=38, 
		OTHER=39, RANG=40, OTHER_ANG=41;
	public const int
		RULE_spec = 0, RULE_items = 1, RULE_namespace = 2, RULE_exclude = 3, RULE_import_file = 4, 
		RULE_dllimport = 5, RULE_add_after_usings = 6, RULE_code = 7, RULE_prefix_strip = 8, 
		RULE_class_name = 9, RULE_calling_convention = 10, RULE_compiler_option = 11, 
		RULE_template = 12, RULE_rexp = 13, RULE_simple_rexp = 14, RULE_basic_rexp = 15, 
		RULE_star_rexp = 16, RULE_plus_rexp = 17, RULE_elementary_rexp = 18, RULE_group_rexp = 19, 
		RULE_basic = 20, RULE_more = 21, RULE_text = 22, RULE_attr = 23, RULE_pass = 24;
	public static readonly string[] ruleNames = {
		"spec", "items", "namespace", "exclude", "import_file", "dllimport", "add_after_usings", 
		"code", "prefix_strip", "class_name", "calling_convention", "compiler_option", 
		"template", "rexp", "simple_rexp", "basic_rexp", "star_rexp", "plus_rexp", 
		"elementary_rexp", "group_rexp", "basic", "more", "text", "attr", "pass"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'calling_convention'", "'add_after_usings'", 
		"'class_name'", "'code'", "'compiler_option'", "'dllimport'", "'exclude'", 
		"'import_file'", "'namespace'", "'pass'", "'prefix_strip'", "'template'", 
		"'=>'", "'='", "';'", "'|'", "'*'", "'+'", "'.'", "'$'", "'(%'", "'%)'", 
		"'('", "')'", "'[^'", "'['", "']'", "'-'", "'{'", "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", 
		"DELIMITED_COMMENT", "CALLING_CONVENTION", "ADD_AFTER_USINGS", "CLASS_NAME", 
		"CODE", "COMPILER_OPTION", "DLLIMPORT", "EXCLUDE", "IMPORT_FILE", "NAMESPACE", 
		"PASS", "PREFIX_STRIP", "TEMPLATE", "REWRITE", "EQ", "SEMI", "OR", "STAR", 
		"PLUS", "DOT", "DOLLAR", "OPEN_RE", "CLOSE_RE", "OPEN_PAREN", "CLOSE_PAREN", 
		"OPEN_BRACKET_NOT", "OPEN_BRACKET", "CLOSE_BRACKET", "MINUS", "LCURLY", 
		"LANG", "StringLiteral", "ID", "WS", "RCURLY", "OTHER", "RANG", "OTHER_ANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SpecParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SpecParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SpecParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SpecParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SpecContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SpecParserParser.Eof, 0); }
		public ItemsContext[] items() {
			return GetRuleContexts<ItemsContext>();
		}
		public ItemsContext items(int i) {
			return GetRuleContext<ItemsContext>(i);
		}
		public SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitSpec(this);
		}
	}

	[RuleVersion(0)]
	public SpecContext spec() {
		SpecContext _localctx = new SpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CALLING_CONVENTION) | (1L << ADD_AFTER_USINGS) | (1L << CLASS_NAME) | (1L << COMPILER_OPTION) | (1L << DLLIMPORT) | (1L << EXCLUDE) | (1L << IMPORT_FILE) | (1L << NAMESPACE) | (1L << PASS) | (1L << PREFIX_STRIP) | (1L << TEMPLATE))) != 0)) {
				{
				{
				State = 50; items();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 56; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemsContext : ParserRuleContext {
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ExcludeContext exclude() {
			return GetRuleContext<ExcludeContext>(0);
		}
		public Import_fileContext import_file() {
			return GetRuleContext<Import_fileContext>(0);
		}
		public DllimportContext dllimport() {
			return GetRuleContext<DllimportContext>(0);
		}
		public Add_after_usingsContext add_after_usings() {
			return GetRuleContext<Add_after_usingsContext>(0);
		}
		public Prefix_stripContext prefix_strip() {
			return GetRuleContext<Prefix_stripContext>(0);
		}
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public Calling_conventionContext calling_convention() {
			return GetRuleContext<Calling_conventionContext>(0);
		}
		public Compiler_optionContext compiler_option() {
			return GetRuleContext<Compiler_optionContext>(0);
		}
		public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		public PassContext pass() {
			return GetRuleContext<PassContext>(0);
		}
		public ItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_items; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterItems(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitItems(this);
		}
	}

	[RuleVersion(0)]
	public ItemsContext items() {
		ItemsContext _localctx = new ItemsContext(Context, State);
		EnterRule(_localctx, 2, RULE_items);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; @namespace();
				}
				break;
			case EXCLUDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; exclude();
				}
				break;
			case IMPORT_FILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60; import_file();
				}
				break;
			case DLLIMPORT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 61; dllimport();
				}
				break;
			case ADD_AFTER_USINGS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 62; add_after_usings();
				}
				break;
			case PREFIX_STRIP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 63; prefix_strip();
				}
				break;
			case CLASS_NAME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 64; class_name();
				}
				break;
			case CALLING_CONVENTION:
				EnterOuterAlt(_localctx, 8);
				{
				State = 65; calling_convention();
				}
				break;
			case COMPILER_OPTION:
				EnterOuterAlt(_localctx, 9);
				{
				State = 66; compiler_option();
				}
				break;
			case TEMPLATE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 67; template();
				}
				break;
			case PASS:
				EnterOuterAlt(_localctx, 11);
				{
				State = 68; pass();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode NAMESPACE() { return GetToken(SpecParserParser.NAMESPACE, 0); }
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(NAMESPACE);
			State = 72; Match(ID);
			State = 73; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExcludeContext : ParserRuleContext {
		public ITerminalNode EXCLUDE() { return GetToken(SpecParserParser.EXCLUDE, 0); }
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public ExcludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclude; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterExclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitExclude(this);
		}
	}

	[RuleVersion(0)]
	public ExcludeContext exclude() {
		ExcludeContext _localctx = new ExcludeContext(Context, State);
		EnterRule(_localctx, 6, RULE_exclude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(EXCLUDE);
			State = 76; Match(ID);
			State = 77; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_fileContext : ParserRuleContext {
		public ITerminalNode IMPORT_FILE() { return GetToken(SpecParserParser.IMPORT_FILE, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SpecParserParser.StringLiteral, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public Import_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterImport_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitImport_file(this);
		}
	}

	[RuleVersion(0)]
	public Import_fileContext import_file() {
		Import_fileContext _localctx = new Import_fileContext(Context, State);
		EnterRule(_localctx, 8, RULE_import_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(IMPORT_FILE);
			State = 80; Match(StringLiteral);
			State = 81; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DllimportContext : ParserRuleContext {
		public ITerminalNode DLLIMPORT() { return GetToken(SpecParserParser.DLLIMPORT, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SpecParserParser.StringLiteral, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public DllimportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dllimport; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterDllimport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitDllimport(this);
		}
	}

	[RuleVersion(0)]
	public DllimportContext dllimport() {
		DllimportContext _localctx = new DllimportContext(Context, State);
		EnterRule(_localctx, 10, RULE_dllimport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(DLLIMPORT);
			State = 84; Match(StringLiteral);
			State = 85; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_after_usingsContext : ParserRuleContext {
		public ITerminalNode ADD_AFTER_USINGS() { return GetToken(SpecParserParser.ADD_AFTER_USINGS, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public Add_after_usingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_after_usings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterAdd_after_usings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitAdd_after_usings(this);
		}
	}

	[RuleVersion(0)]
	public Add_after_usingsContext add_after_usings() {
		Add_after_usingsContext _localctx = new Add_after_usingsContext(Context, State);
		EnterRule(_localctx, 12, RULE_add_after_usings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(ADD_AFTER_USINGS);
			State = 88; code();
			State = 89; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public ITerminalNode LCURLY() { return GetToken(SpecParserParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(SpecParserParser.RCURLY, 0); }
		public ITerminalNode[] OTHER() { return GetTokens(SpecParserParser.OTHER); }
		public ITerminalNode OTHER(int i) {
			return GetToken(SpecParserParser.OTHER, i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 14, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(LCURLY);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OTHER) {
				{
				{
				State = 92; Match(OTHER);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_stripContext : ParserRuleContext {
		public ITerminalNode PREFIX_STRIP() { return GetToken(SpecParserParser.PREFIX_STRIP, 0); }
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public Prefix_stripContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_strip; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterPrefix_strip(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitPrefix_strip(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_stripContext prefix_strip() {
		Prefix_stripContext _localctx = new Prefix_stripContext(Context, State);
		EnterRule(_localctx, 16, RULE_prefix_strip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(PREFIX_STRIP);
			State = 101; Match(ID);
			State = 102; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		public ITerminalNode CLASS_NAME() { return GetToken(SpecParserParser.CLASS_NAME, 0); }
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(Context, State);
		EnterRule(_localctx, 18, RULE_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(CLASS_NAME);
			State = 105; Match(ID);
			State = 106; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Calling_conventionContext : ParserRuleContext {
		public ITerminalNode CALLING_CONVENTION() { return GetToken(SpecParserParser.CALLING_CONVENTION, 0); }
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public Calling_conventionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calling_convention; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterCalling_convention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitCalling_convention(this);
		}
	}

	[RuleVersion(0)]
	public Calling_conventionContext calling_convention() {
		Calling_conventionContext _localctx = new Calling_conventionContext(Context, State);
		EnterRule(_localctx, 20, RULE_calling_convention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(CALLING_CONVENTION);
			State = 109; Match(ID);
			State = 110; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compiler_optionContext : ParserRuleContext {
		public ITerminalNode COMPILER_OPTION() { return GetToken(SpecParserParser.COMPILER_OPTION, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SpecParserParser.StringLiteral, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public Compiler_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compiler_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterCompiler_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitCompiler_option(this);
		}
	}

	[RuleVersion(0)]
	public Compiler_optionContext compiler_option() {
		Compiler_optionContext _localctx = new Compiler_optionContext(Context, State);
		EnterRule(_localctx, 22, RULE_compiler_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(COMPILER_OPTION);
			State = 113; Match(StringLiteral);
			State = 114; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContext : ParserRuleContext {
		public ITerminalNode TEMPLATE() { return GetToken(SpecParserParser.TEMPLATE, 0); }
		public RexpContext rexp() {
			return GetRuleContext<RexpContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 24, RULE_template);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(TEMPLATE);
			State = 117; rexp();
			State = 118; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RexpContext : ParserRuleContext {
		public Simple_rexpContext[] simple_rexp() {
			return GetRuleContexts<Simple_rexpContext>();
		}
		public Simple_rexpContext simple_rexp(int i) {
			return GetRuleContext<Simple_rexpContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(SpecParserParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(SpecParserParser.OR, i);
		}
		public RexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterRexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitRexp(this);
		}
	}

	[RuleVersion(0)]
	public RexpContext rexp() {
		RexpContext _localctx = new RexpContext(Context, State);
		EnterRule(_localctx, 26, RULE_rexp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; simple_rexp();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 121; Match(OR);
				State = 122; simple_rexp();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_rexpContext : ParserRuleContext {
		public Basic_rexpContext[] basic_rexp() {
			return GetRuleContexts<Basic_rexpContext>();
		}
		public Basic_rexpContext basic_rexp(int i) {
			return GetRuleContext<Basic_rexpContext>(i);
		}
		public Simple_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterSimple_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitSimple_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Simple_rexpContext simple_rexp() {
		Simple_rexpContext _localctx = new Simple_rexpContext(Context, State);
		EnterRule(_localctx, 28, RULE_simple_rexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 128; basic_rexp();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_rexpContext : ParserRuleContext {
		public Star_rexpContext star_rexp() {
			return GetRuleContext<Star_rexpContext>(0);
		}
		public Plus_rexpContext plus_rexp() {
			return GetRuleContext<Plus_rexpContext>(0);
		}
		public Elementary_rexpContext elementary_rexp() {
			return GetRuleContext<Elementary_rexpContext>(0);
		}
		public Basic_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterBasic_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitBasic_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Basic_rexpContext basic_rexp() {
		Basic_rexpContext _localctx = new Basic_rexpContext(Context, State);
		EnterRule(_localctx, 30, RULE_basic_rexp);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; star_rexp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134; plus_rexp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 135; elementary_rexp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_rexpContext : ParserRuleContext {
		public Elementary_rexpContext elementary_rexp() {
			return GetRuleContext<Elementary_rexpContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(SpecParserParser.STAR, 0); }
		public Star_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterStar_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitStar_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Star_rexpContext star_rexp() {
		Star_rexpContext _localctx = new Star_rexpContext(Context, State);
		EnterRule(_localctx, 32, RULE_star_rexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; elementary_rexp();
			State = 139; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plus_rexpContext : ParserRuleContext {
		public Elementary_rexpContext elementary_rexp() {
			return GetRuleContext<Elementary_rexpContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(SpecParserParser.PLUS, 0); }
		public Plus_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plus_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterPlus_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitPlus_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Plus_rexpContext plus_rexp() {
		Plus_rexpContext _localctx = new Plus_rexpContext(Context, State);
		EnterRule(_localctx, 34, RULE_plus_rexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; elementary_rexp();
			State = 142; Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elementary_rexpContext : ParserRuleContext {
		public Group_rexpContext group_rexp() {
			return GetRuleContext<Group_rexpContext>(0);
		}
		public BasicContext basic() {
			return GetRuleContext<BasicContext>(0);
		}
		public Elementary_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementary_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterElementary_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitElementary_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Elementary_rexpContext elementary_rexp() {
		Elementary_rexpContext _localctx = new Elementary_rexpContext(Context, State);
		EnterRule(_localctx, 36, RULE_elementary_rexp);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_RE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; group_rexp();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145; basic();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_rexpContext : ParserRuleContext {
		public ITerminalNode OPEN_RE() { return GetToken(SpecParserParser.OPEN_RE, 0); }
		public RexpContext rexp() {
			return GetRuleContext<RexpContext>(0);
		}
		public ITerminalNode CLOSE_RE() { return GetToken(SpecParserParser.CLOSE_RE, 0); }
		public Group_rexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_rexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterGroup_rexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitGroup_rexp(this);
		}
	}

	[RuleVersion(0)]
	public Group_rexpContext group_rexp() {
		Group_rexpContext _localctx = new Group_rexpContext(Context, State);
		EnterRule(_localctx, 38, RULE_group_rexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(OPEN_RE);
			State = 149; rexp();
			State = 150; Match(CLOSE_RE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicContext : ParserRuleContext {
		public ITerminalNode OPEN_PAREN() { return GetToken(SpecParserParser.OPEN_PAREN, 0); }
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(SpecParserParser.CLOSE_PAREN, 0); }
		public MoreContext[] more() {
			return GetRuleContexts<MoreContext>();
		}
		public MoreContext more(int i) {
			return GetRuleContext<MoreContext>(i);
		}
		public BasicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterBasic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitBasic(this);
		}
	}

	[RuleVersion(0)]
	public BasicContext basic() {
		BasicContext _localctx = new BasicContext(Context, State);
		EnterRule(_localctx, 40, RULE_basic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(OPEN_PAREN);
			State = 153; Match(ID);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_RE) | (1L << OPEN_PAREN) | (1L << LCURLY) | (1L << LANG) | (1L << ID))) != 0)) {
				{
				{
				State = 154; more();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreContext : ParserRuleContext {
		public RexpContext rexp() {
			return GetRuleContext<RexpContext>(0);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		public MoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_more; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterMore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitMore(this);
		}
	}

	[RuleVersion(0)]
	public MoreContext more() {
		MoreContext _localctx = new MoreContext(Context, State);
		EnterRule(_localctx, 42, RULE_more);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_RE:
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; rexp();
				}
				break;
			case LANG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163; text();
				}
				break;
			case LCURLY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 164; code();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 165; attr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode LANG() { return GetToken(SpecParserParser.LANG, 0); }
		public ITerminalNode RANG() { return GetToken(SpecParserParser.RANG, 0); }
		public ITerminalNode[] OTHER_ANG() { return GetTokens(SpecParserParser.OTHER_ANG); }
		public ITerminalNode OTHER_ANG(int i) {
			return GetToken(SpecParserParser.OTHER_ANG, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 44, RULE_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(LANG);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OTHER_ANG) {
				{
				{
				State = 169; Match(OTHER_ANG);
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 175; Match(RANG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode EQ() { return GetToken(SpecParserParser.EQ, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SpecParserParser.StringLiteral, 0); }
		public ITerminalNode STAR() { return GetToken(SpecParserParser.STAR, 0); }
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 46, RULE_attr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(ID);
			State = 178; Match(EQ);
			State = 179;
			_la = TokenStream.LA(1);
			if ( !(_la==STAR || _la==StringLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassContext : ParserRuleContext {
		public ITerminalNode PASS() { return GetToken(SpecParserParser.PASS, 0); }
		public ITerminalNode ID() { return GetToken(SpecParserParser.ID, 0); }
		public ITerminalNode SEMI() { return GetToken(SpecParserParser.SEMI, 0); }
		public PassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterPass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitPass(this);
		}
	}

	[RuleVersion(0)]
	public PassContext pass() {
		PassContext _localctx = new PassContext(Context, State);
		EnterRule(_localctx, 48, RULE_pass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(PASS);
			State = 182; Match(ID);
			State = 183; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\xBC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\a', '\x2', '\x36', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x39', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'H', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', '`', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'\x63', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'~', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x81', '\v', '\xF', '\x3', 
		'\x10', '\x6', '\x10', '\x84', '\n', '\x10', '\r', '\x10', '\xE', '\x10', 
		'\x85', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x8B', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x95', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x9E', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xA1', '\v', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\xA9', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\a', '\x18', '\xAD', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\xB0', 
		'\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x2', '\x2', '\x1B', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x2', '\x3', '\x4', '\x2', '\x17', '\x17', '%', '%', '\x2', '\xB8', '\x2', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x4', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'I', '\x3', '\x2', '\x2', '\x2', '\b', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'Q', '\x3', '\x2', '\x2', '\x2', '\f', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'Y', '\x3', '\x2', '\x2', '\x2', '\x10', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x66', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'j', '\x3', '\x2', '\x2', '\x2', '\x16', 'n', '\x3', '\x2', '\x2', '\x2', 
		'\x18', 'r', '\x3', '\x2', '\x2', '\x2', '\x1A', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', 'z', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x83', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x8A', '\x3', '\x2', '\x2', '\x2', '\"', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x8F', '\x3', '\x2', '\x2', '\x2', '&', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '(', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '*', '\x9A', '\x3', '\x2', '\x2', '\x2', ',', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xAA', '\x3', '\x2', '\x2', '\x2', '\x30', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x36', '\x5', '\x4', '\x3', '\x2', '\x35', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x39', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x38', ':', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\a', '\x2', '\x2', '\x3', ';', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '<', 'H', '\x5', '\x6', '\x4', '\x2', '=', 'H', '\x5', 
		'\b', '\x5', '\x2', '>', 'H', '\x5', '\n', '\x6', '\x2', '?', 'H', '\x5', 
		'\f', '\a', '\x2', '@', 'H', '\x5', '\xE', '\b', '\x2', '\x41', 'H', '\x5', 
		'\x12', '\n', '\x2', '\x42', 'H', '\x5', '\x14', '\v', '\x2', '\x43', 
		'H', '\x5', '\x16', '\f', '\x2', '\x44', 'H', '\x5', '\x18', '\r', '\x2', 
		'\x45', 'H', '\x5', '\x1A', '\xE', '\x2', '\x46', 'H', '\x5', '\x32', 
		'\x1A', '\x2', 'G', '<', '\x3', '\x2', '\x2', '\x2', 'G', '=', '\x3', 
		'\x2', '\x2', '\x2', 'G', '>', '\x3', '\x2', '\x2', '\x2', 'G', '?', '\x3', 
		'\x2', '\x2', '\x2', 'G', '@', '\x3', '\x2', '\x2', '\x2', 'G', '\x41', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\x42', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\x43', '\x3', '\x2', '\x2', '\x2', 'G', '\x44', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x5', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', 
		'\xF', '\x2', '\x2', 'J', 'K', '\a', '&', '\x2', '\x2', 'K', 'L', '\a', 
		'\x15', '\x2', '\x2', 'L', '\a', '\x3', '\x2', '\x2', '\x2', 'M', 'N', 
		'\a', '\r', '\x2', '\x2', 'N', 'O', '\a', '&', '\x2', '\x2', 'O', 'P', 
		'\a', '\x15', '\x2', '\x2', 'P', '\t', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'R', '\a', '\xE', '\x2', '\x2', 'R', 'S', '\a', '%', '\x2', '\x2', 'S', 
		'T', '\a', '\x15', '\x2', '\x2', 'T', '\v', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\a', '\f', '\x2', '\x2', 'V', 'W', '\a', '%', '\x2', '\x2', 
		'W', 'X', '\a', '\x15', '\x2', '\x2', 'X', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\a', '\b', '\x2', '\x2', 'Z', '[', '\x5', '\x10', '\t', 
		'\x2', '[', '\\', '\a', '\x15', '\x2', '\x2', '\\', '\xF', '\x3', '\x2', 
		'\x2', '\x2', ']', '\x61', '\a', '#', '\x2', '\x2', '^', '`', '\a', ')', 
		'\x2', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'(', '\x2', '\x2', '\x65', '\x11', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\a', '\x11', '\x2', '\x2', 'g', 'h', '\a', '&', '\x2', '\x2', 'h', 
		'i', '\a', '\x15', '\x2', '\x2', 'i', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '\t', '\x2', '\x2', 'k', 'l', '\a', '&', '\x2', '\x2', 
		'l', 'm', '\a', '\x15', '\x2', '\x2', 'm', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\a', '\a', '\x2', '\x2', 'o', 'p', '\a', '&', '\x2', 
		'\x2', 'p', 'q', '\a', '\x15', '\x2', '\x2', 'q', '\x17', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\a', '\v', '\x2', '\x2', 's', 't', '\a', '%', 
		'\x2', '\x2', 't', 'u', '\a', '\x15', '\x2', '\x2', 'u', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\a', '\x12', '\x2', '\x2', 'w', 'x', '\x5', 
		'\x1C', '\xF', '\x2', 'x', 'y', '\a', '\x15', '\x2', '\x2', 'y', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x7F', '\x5', '\x1E', '\x10', '\x2', 
		'{', '|', '\a', '\x16', '\x2', '\x2', '|', '~', '\x5', '\x1E', '\x10', 
		'\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x84', '\x5', ' ', 
		'\x11', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x8B', '\x5', '\"', '\x12', '\x2', '\x88', '\x8B', 
		'\x5', '$', '\x13', '\x2', '\x89', '\x8B', '\x5', '&', '\x14', '\x2', 
		'\x8A', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x5', '&', '\x14', '\x2', 
		'\x8D', '\x8E', '\a', '\x17', '\x2', '\x2', '\x8E', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x90', '\x5', '&', '\x14', '\x2', '\x90', '\x91', 
		'\a', '\x18', '\x2', '\x2', '\x91', '%', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x95', '\x5', '(', '\x15', '\x2', '\x93', '\x95', '\x5', '*', '\x16', 
		'\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\'', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\a', '\x1B', '\x2', '\x2', '\x97', '\x98', '\x5', '\x1C', '\xF', 
		'\x2', '\x98', '\x99', '\a', '\x1C', '\x2', '\x2', '\x99', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\x1D', '\x2', '\x2', '\x9B', 
		'\x9F', '\a', '&', '\x2', '\x2', '\x9C', '\x9E', '\x5', ',', '\x17', '\x2', 
		'\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\x1E', 
		'\x2', '\x2', '\xA3', '+', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA9', 
		'\x5', '\x1C', '\xF', '\x2', '\xA5', '\xA9', '\x5', '.', '\x18', '\x2', 
		'\xA6', '\xA9', '\x5', '\x10', '\t', '\x2', '\xA7', '\xA9', '\x5', '\x30', 
		'\x19', '\x2', '\xA8', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAE', '\a', '$', '\x2', '\x2', '\xAB', '\xAD', 
		'\a', '+', '\x2', '\x2', '\xAC', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\a', '*', '\x2', '\x2', '\xB2', '/', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB4', '\a', '&', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x14', 
		'\x2', '\x2', '\xB5', '\xB6', '\t', '\x2', '\x2', '\x2', '\xB6', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x10', '\x2', '\x2', 
		'\xB8', '\xB9', '\a', '&', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x15', 
		'\x2', '\x2', '\xBA', '\x33', '\x3', '\x2', '\x2', '\x2', '\f', '\x37', 
		'G', '\x61', '\x7F', '\x85', '\x8A', '\x94', '\x9F', '\xA8', '\xAE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
