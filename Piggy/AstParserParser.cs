//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AstParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class AstParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_DOC_COMMENT=1, DELIMITED_DOC_COMMENT=2, SINGLE_LINE_COMMENT=3, 
		DELIMITED_COMMENT=4, OPEN_PAREN=5, CLOSE_PAREN=6, EQUALS=7, StringLiteral=8, 
		ID=9, WS=10;
	public const int
		RULE_ast = 0, RULE_decl = 1, RULE_attr = 2, RULE_child = 3;
	public static readonly string[] ruleNames = {
		"ast", "decl", "attr", "child"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", 
		"DELIMITED_COMMENT", "OPEN_PAREN", "CLOSE_PAREN", "EQUALS", "StringLiteral", 
		"ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AstParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AstParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AstParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AstParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class AstContext : ParserRuleContext {
		public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AstParserParser.Eof, 0); }
		public AstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ast; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAstParserListener typedListener = listener as IAstParserListener;
			if (typedListener != null) typedListener.EnterAst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAstParserListener typedListener = listener as IAstParserListener;
			if (typedListener != null) typedListener.ExitAst(this);
		}
	}

	[RuleVersion(0)]
	public AstContext ast() {
		AstContext _localctx = new AstContext(Context, State);
		EnterRule(_localctx, 0, RULE_ast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; decl();
			State = 9; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		public ITerminalNode OPEN_PAREN() { return GetToken(AstParserParser.OPEN_PAREN, 0); }
		public ITerminalNode ID() { return GetToken(AstParserParser.ID, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(AstParserParser.CLOSE_PAREN, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public ChildContext[] child() {
			return GetRuleContexts<ChildContext>();
		}
		public ChildContext child(int i) {
			return GetRuleContext<ChildContext>(i);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAstParserListener typedListener = listener as IAstParserListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAstParserListener typedListener = listener as IAstParserListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11; Match(OPEN_PAREN);
			State = 12; Match(ID);
			State = 16;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 13; attr();
				}
				}
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_PAREN) {
				{
				{
				State = 19; child();
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 25; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(AstParserParser.ID, 0); }
		public ITerminalNode EQUALS() { return GetToken(AstParserParser.EQUALS, 0); }
		public ITerminalNode StringLiteral() { return GetToken(AstParserParser.StringLiteral, 0); }
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAstParserListener typedListener = listener as IAstParserListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAstParserListener typedListener = listener as IAstParserListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 4, RULE_attr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(ID);
			State = 28; Match(EQUALS);
			State = 29; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChildContext : ParserRuleContext {
		public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		public ChildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAstParserListener typedListener = listener as IAstParserListener;
			if (typedListener != null) typedListener.EnterChild(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAstParserListener typedListener = listener as IAstParserListener;
			if (typedListener != null) typedListener.ExitChild(this);
		}
	}

	[RuleVersion(0)]
	public ChildContext child() {
		ChildContext _localctx = new ChildContext(Context, State);
		EnterRule(_localctx, 6, RULE_child);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '$', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', '\x11', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x14', '\v', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x17', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x1A', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x2', '\x2', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', '\x2', 
		'\x2', '!', '\x2', '\n', '\x3', '\x2', '\x2', '\x2', '\x4', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x1D', '\x3', '\x2', '\x2', '\x2', '\b', 
		'!', '\x3', '\x2', '\x2', '\x2', '\n', '\v', '\x5', '\x4', '\x3', '\x2', 
		'\v', '\f', '\a', '\x2', '\x2', '\x3', '\f', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\xE', '\a', '\a', '\x2', '\x2', '\xE', '\x12', '\a', '\v', 
		'\x2', '\x2', '\xF', '\x11', '\x5', '\x6', '\x4', '\x2', '\x10', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x10', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x18', '\x3', '\x2', '\x2', '\x2', '\x14', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x17', '\x5', '\b', '\x5', '\x2', 
		'\x16', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\b', 
		'\x2', '\x2', '\x1C', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', 
		'\a', '\v', '\x2', '\x2', '\x1E', '\x1F', '\a', '\t', '\x2', '\x2', '\x1F', 
		' ', '\a', '\n', '\x2', '\x2', ' ', '\a', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\x5', '\x4', '\x3', '\x2', '\"', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x12', '\x18',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
