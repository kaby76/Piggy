
template Typedefs
{
    header {{
        protected string generated_file_name;
    }}

    // The only mechanism to create an alias type in C# is to use a struct,
    // where there is one field of the type desired.
    //
    // There are so far the following cases:

    pass GeneratePointerTypes {
        ( TypedefDecl SrcRange=$"{ClangSupport.limit}" Name=$"{ClangSupport.generate_for_only}" ( PointerType )
            {{
                // Typedefs 1
                var scope = _stack.Peek();
                var name = tree.Attr("Name");
                bool is_rewrite = ClangSupport.IsAppliedOccurrenceRewrite(false, name);
                // If name is part of rewrite, then we don't create typedef struct.
                if (is_rewrite) return;
                var baretype_name = "IntPtr";
                var def = scope.getSymbol(name);
                if (def != null) return;

                if (Runtime.Tool.OutputLocation != null && Directory.Exists(Runtime.Tool.OutputLocation))
                {
                    generated_file_name = Runtime.Tool.MakeFileNameUnique(Runtime.Tool.OutputLocation + "g-" + name + ".cs");
                    Runtime.Tool.Redirect = new Runtime.Redirect(generated_file_name);
                    System.Console.WriteLine("// This file generated by Piggy. Do not edit.");
                    System.Console.WriteLine("namespace " + ClangSupport.namespace_name);
                    System.Console.WriteLine("{");
                    System.Console.WriteLine("using System;");
                    System.Console.WriteLine("using System.Runtime.InteropServices;");
                }
                def = new StructSymbol(name);
                scope.define(def);
                System.Console.WriteLine(
                    @"[StructLayout(LayoutKind.Sequential)]
                    public partial struct " + name + @"
                    {
                        public " + baretype_name + @" Value;
                        public " + name + @"(" + baretype_name + @" value)
                        {
                            this.Value = value;
                        }
                    }");
                if (Runtime.Tool.OutputLocation != null && Directory.Exists(Runtime.Tool.OutputLocation))
                {
                    // Create a new file for this struct.
                    System.Console.WriteLine("}");
                    Runtime.Tool.Redirect.Dispose();
                    Runtime.Tool.Redirect = null;
                    ClangSupport.FormatFile(generated_file_name);
                }
            }}
        )
    }

    pass GenerateTypedefs {
        ( TypedefDecl SrcRange=$"{ClangSupport.limit}" Name=$"{ClangSupport.generate_for_only}"
            ( BuiltinType BareType=*
                {{
                    // Typedefs 2
                    var scope = _stack.Peek();
                    var name = tree.Peek(1).Attr("Name");
                    string preferred_name = ClangSupport.RewriteAppliedOccurrence(false, name);
                    bool is_rewrite = ClangSupport.IsAppliedOccurrenceRewrite(false, name);
                    // If name is part of rewrite, then we don't create typedef struct.
                    if (is_rewrite) return;
                    if (Runtime.Tool.OutputLocation != null && Directory.Exists(Runtime.Tool.OutputLocation))
                    {
                        generated_file_name = Runtime.Tool.MakeFileNameUnique(Runtime.Tool.OutputLocation + "g-" + name + ".cs");
                        Runtime.Tool.Redirect = new Runtime.Redirect(generated_file_name);
                        System.Console.WriteLine("// This file generated by Piggy. Do not edit.");
                        System.Console.WriteLine("namespace " + ClangSupport.namespace_name);
                        System.Console.WriteLine("{");
                        System.Console.WriteLine("using System;");
                        System.Console.WriteLine("using System.Runtime.InteropServices;");
                    }
                    var baretype_name = tree.Attr("BareType");
                    baretype_name = ClangSupport.RewriteAppliedOccurrence(false, baretype_name);
                    System.Console.WriteLine(
                        @"[StructLayout(LayoutKind.Sequential)]
                        public partial struct " + name + @"
                        {
                            public " + baretype_name + @" Value;
                            public " + name + @"(" + baretype_name + @" value)
                            {
                                this.Value = value;
                            }
                        }");
                    if (Runtime.Tool.OutputLocation != null && Directory.Exists(Runtime.Tool.OutputLocation))
                    {
                        // Create a new file for this struct.
                        System.Console.WriteLine("}");
                        Runtime.Tool.Redirect.Dispose();
                        Runtime.Tool.Redirect = null;
                        ClangSupport.FormatFile(generated_file_name);
                    }
                }}
        )   )
    
        ( TypedefDecl SrcRange=$"{ClangSupport.limit}" Name=$"{ClangSupport.generate_for_only}"
            ( ElaboratedType
                ( RecordType
                    ( CXXRecord Name=*
                        {{
                            // Typedefs 3

                            var scope = _stack.Peek();
                            var name = tree.Peek(3).Attr("Name");
                            string preferred_name = ClangSupport.RewriteAppliedOccurrence(false, name);
                            bool is_rewrite = ClangSupport.IsAppliedOccurrenceRewrite(false, name);
                            // If name is part of rewrite, then we don't create typedef struct.
                            if (is_rewrite) return;
                            var cxxrec_name = tree.Attr("Name");
                            cxxrec_name = ClangSupport.RewriteAppliedOccurrence(false, cxxrec_name);

                            if (Runtime.Tool.OutputLocation != null && Directory.Exists(Runtime.Tool.OutputLocation))
                            {
                                generated_file_name = Runtime.Tool.MakeFileNameUnique(Runtime.Tool.OutputLocation + "g-" + name + ".cs");
                                Runtime.Tool.Redirect = new Runtime.Redirect(generated_file_name);
                                System.Console.WriteLine("// This file generated by Piggy. Do not edit.");
                                System.Console.WriteLine("namespace " + ClangSupport.namespace_name);
                                System.Console.WriteLine("{");
                                System.Console.WriteLine("using System;");
                                System.Console.WriteLine("using System.Runtime.InteropServices;");
                            }
                            System.Console.WriteLine(
                                @"[StructLayout(LayoutKind.Sequential)]
                                public partial struct " + name + @"
                                {
                                    public " + cxxrec_name + @" Value;
                                    public " + name + @"(" + cxxrec_name + @" value)
                                    {
                                        this.Value = value;
                                    }
                                }");
                            if (Runtime.Tool.OutputLocation != null && Directory.Exists(Runtime.Tool.OutputLocation))
                            {
                                // Create a new file for this struct.
                                System.Console.WriteLine("}");
                                Runtime.Tool.Redirect.Dispose();
                                Runtime.Tool.Redirect = null;
                                ClangSupport.FormatFile(generated_file_name);
                            }
                        }}
        )   )   )   )

        ( TypedefDecl SrcRange=$"{ClangSupport.limit}" Name=$"{ClangSupport.generate_for_only}"
            ( ElaboratedType
                ( RecordType
                    ( Record Name=*
                        {{
                            // Typedefs 4
                            var scope = _stack.Peek();
                            var name = tree.Peek(3).Attr("Name");
                            string preferred_name = ClangSupport.RewriteAppliedOccurrence(false, name);
                            bool is_rewrite = ClangSupport.IsAppliedOccurrenceRewrite(false, name);
                            // If name is part of rewrite, then we don't create typedef struct.
                            if (is_rewrite) return;
                            var cxxrec_name = tree.Attr("Name");
                            cxxrec_name = ClangSupport.RewriteAppliedOccurrence(false, cxxrec_name);
                            if (Runtime.Tool.OutputLocation != null && Directory.Exists(Runtime.Tool.OutputLocation))
                            {
                                generated_file_name = Runtime.Tool.MakeFileNameUnique(Runtime.Tool.OutputLocation + "g-" + name + ".cs");
                                Runtime.Tool.Redirect = new Runtime.Redirect(generated_file_name);
                                System.Console.WriteLine("// This file generated by Piggy. Do not edit.");
                                System.Console.WriteLine("namespace " + ClangSupport.namespace_name);
                                System.Console.WriteLine("{");
                                System.Console.WriteLine("using System;");
                                System.Console.WriteLine("using System.Runtime.InteropServices;");
                            }
                            System.Console.WriteLine(
                                @"[StructLayout(LayoutKind.Sequential)]
                                public partial struct " + name + @"
                                {
                                    public " + cxxrec_name + @" Value;
                                    public " + name + @"(" + cxxrec_name + @" value)
                                    {
                                        this.Value = value;
                                    }
                                }");
                            if (Runtime.Tool.OutputLocation != null && Directory.Exists(Runtime.Tool.OutputLocation))
                            {
                                // Create a new file for this struct.
                                System.Console.WriteLine("}");
                                Runtime.Tool.Redirect.Dispose();
                                Runtime.Tool.Redirect = null;
                                ClangSupport.FormatFile(generated_file_name);
                            }
                        }}
        )   )   )   )

        ( TypedefDecl SrcRange=$"{ClangSupport.limit}" Name=$"{ClangSupport.generate_for_only}"
            ( ElaboratedType
                ( EnumType
                    ( Enum Name=*
                        {{
                            // Typedefs 5
                            var scope = _stack.Peek();
                            var name = tree.Peek(3).Attr("Name");
                            string preferred_name = ClangSupport.RewriteAppliedOccurrence(false, name);
                            bool is_rewrite = ClangSupport.IsAppliedOccurrenceRewrite(false, name);
                            // If name is part of rewrite, then we don't create typedef struct.
                            if (is_rewrite) return;
                            var base_name = tree.Attr("Name");
                            base_name = ClangSupport.RewriteAppliedOccurrence(false, base_name);
                            if (Runtime.Tool.OutputLocation != null && Directory.Exists(Runtime.Tool.OutputLocation))
                            {
                                generated_file_name = Runtime.Tool.MakeFileNameUnique(Runtime.Tool.OutputLocation + "g-" + name + ".cs");
                                Runtime.Tool.Redirect = new Runtime.Redirect(generated_file_name);
                                System.Console.WriteLine("// This file generated by Piggy. Do not edit.");
                                System.Console.WriteLine("namespace " + ClangSupport.namespace_name);
                                System.Console.WriteLine("{");
                                System.Console.WriteLine("using System;");
                                System.Console.WriteLine("using System.Runtime.InteropServices;");
                            }
                            System.Console.WriteLine(
                                @"[StructLayout(LayoutKind.Sequential)]
                                public partial struct " + name + @"
                                {
                                    public " + base_name + @" Value;
                                    public " + name + @"(" + base_name + @" value)
                                    {
                                        this.Value = value;
                                    }
                                }");
                            if (Runtime.Tool.OutputLocation != null && Directory.Exists(Runtime.Tool.OutputLocation))
                            {
                                // Create a new file for this struct.
                                System.Console.WriteLine("}");
                                Runtime.Tool.Redirect.Dispose();
                                Runtime.Tool.Redirect = null;
                                ClangSupport.FormatFile(generated_file_name);
                            }
                        }}
        )   )   )   )
    }
}